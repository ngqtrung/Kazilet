@page
@model PRN231_Kazilet_WebApp.Pages.Questions.IndexModel
@{
}
<style>
    /* Thêm transform-style và perspective không có sẵn trong Tailwind */
    .flip-card {
        transform-style: preserve-3d;
        transition: transform 0.7s;
    }

    .flipped {
        transform: rotateX(180deg);
    }

    .backface-hidden {
        backface-visibility: hidden;
    }

    #box {
        transition: height 0.5s ease, padding 0.5s ease, font-size 0.5s ease;
    }

    /* Cho mặt sau */
    #back-side {
        transition: padding 0.5s ease, font-size 0.5s ease;
    }

    /* Cho các phần tử khác nếu cần */
    .p-box, .pp-box {
        transition: width 0.5s ease, margin 0.5s ease;
    }
</style>
<!--
<div id="pBox"  style="width: 80%; display: none; margin-right: 10%; margin-left: 10%" class="flex flex-col">
    <div id="box" class="w-full [perspective:1000px] cursor-pointer mb-4 animate-[fade-out_2s_ease-out_1s_1_forwards] opacity-1">

        <div class="relative flip-card w-full" id="flipCard">
            <div id="front-side" class="flex justify-center items-center w-full text-xl mb-4 border-2 border-solid border-gray-100 shadow-xl absolute rounded-lg p-8 backface-hidden inset-0 rounded-xl shadow-xl  [transform:rotateX(180deg)]">
@{
    char[] answerLabels = "ABCDEFGHIJKLMNOPQRSTUVWXYZ".ToCharArray();
}

            </div>
            <div style="font-size: 30px !important; padding: 100px" class="flex flex-col justify-center w-full  text-xl border-2 border-solid border-gray-100 shadow-xl rounded-lg p-8 inset-0 backface-hidden [transform:rotateX(0deg)]">
                <div id="back-side-q" class="mb-2">
                </div>
                <div id="back-side-a" class="flex flex-col">
                </div>
            </div>
        </div>
    </div>
    <div>
        <div class="flex flex-row items-center justify-between">
            <div class="flex flex-row items-center">
                <div style="margin-bottom: 8px; margin-right: 4px">
                    Track Progress
                </div>
                <div>
                    <label class="inline-flex items-center cursor-pointer">
                        <input type="checkbox" value="" class="sr-only peer">
                        <div class="relative w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 dark:peer-focus:ring-blue-800 rounded-full peer dark:bg-gray-700 peer-checked:after:translate-x-full rtl:peer-checked:after:-translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:start-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-blue-600"></div>
                    </label>
                </div>
            </div>
            <div class="flex flex-row items-center justify-center">
                <div class="mr-4">
                    <button id="prevBtn" style="display: none" onclick="getNextFlashcard('PREV')" class="border-2 border-solid border-gray-300 rounded-full">
                        <svg class="h-8 w-8 text-gray-500" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">  <path stroke="none" d="M0 0h24v24H0z" />  <line x1="5" y1="12" x2="19" y2="12" />  <line x1="5" y1="12" x2="9" y2="16" />  <line x1="5" y1="12" x2="9" y2="8" /></svg>
                    </button>
                </div>
                <div class="mr-4 font-medium text-lg" style="margin-bottom: 8px">
                    <span><span id="page">1</span> / <span id="total">@Model.Total</span></span>
                </div>
                <div style="display: none">1</div>
                <div>
                    <button id="nextBtn" onclick="getNextFlashcard('NEXT')" class="border-2 border-solid border-gray-300 rounded-full">
                        <svg class="h-8 w-8 text-gray-500" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">  <path stroke="none" d="M0 0h24v24H0z" />  <line x1="5" y1="12" x2="19" y2="12" />  <line x1="15" y1="16" x2="19" y2="12" />  <line x1="15" y1="8" x2="19" y2="12" /></svg>
                    </button>
                </div>
            </div>
            <div class="flex flex-row">
                <div class="mr-4">
                    <button class="h-8 w-8">
                        <svg id="randomBtn" onclick="randomQuestion()" class="h-full w-full text-gray-500" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">  <path stroke="none" d="M0 0h24v24H0z" />  <polyline points="15 4 19 4 19 8" />  <line x1="14.75" y1="9.25" x2="19" y2="4" />  <line x1="5" y1="19" x2="9" y2="15" />  <polyline points="15 19 19 19 19 15" />  <line x1="5" y1="5" x2="19" y2="19" /></svg>
                    </button>
                </div>
                <div>
                    <button class="h-8 w-8">
                        <svg id="fullScreenBtn" onclick="fullScreenClick()" class="h-full w-full text-gray-500" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">  <path stroke="none" d="M0 0h24v24H0z" />  <polyline points="16 4 20 4 20 8" />  <line x1="14" y1="10" x2="20" y2="4" />  <polyline points="8 20 4 20 4 16" />  <line x1="4" y1="20" x2="10" y2="14" />  <polyline points="16 20 20 20 20 16" />  <line x1="14" y1="14" x2="20" y2="20" />  <polyline points="8 4 4 4 4 8" />  <line x1="4" y1="4" x2="10" y2="10" /></svg>
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>
-->
<div id="changePasswordDialog" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center hidden">
    <div class="bg-gray-800 p-8 rounded-lg shadow-xl w-full max-w-md">
        <h3 class="text-2xl font-bold text-white mb-4">Change password</h3>
        <form class="mt-3" id="changePasswordForm">
            <div class="mb-4">
                <label for="oldPwd" class="block text-sm font-medium text-gray-300 mb-2">Old Password</label>
                <input type="password" id="oldPwd" name="oldPwd" required
                       class="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-secondary">
                <label for="newPwd" class="block text-sm font-medium text-gray-300 mb-2">New Password</label>
                <input type="password" id="newPwd" name="newPwd" required
                       class="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-secondary">
                <label for="cfPwd" class="block text-sm font-medium text-gray-300 mb-2">Confirm Password</label>
                <input type="password" id="cfPwd" name="cfPwd" required
                       class="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-secondary">
            </div>
            <div id="changeErrorMessage" class="mb-4 text-red-500 text-sm hidden"></div>
            <button type="button" id="changePasswordBtn" disabled
                    class="w-full bg-secondary text-white py-2 px-4 rounded-md hover:bg-secondary-dark transition duration-300 disabled:opacity-50 disabled:cursor-not-allowed">
                Change Password
            </button>
        </form>
    </div>
</div>
<header class="border-b border-gray-200 sticky top-0 bg-white z-10">
    <div class="container mx-auto px-4 py-4 flex items-center">
        <button id="mobileMenuToggle" class="mr-2 md:hidden text-primary hover:text-secondary focus:outline-none">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
            </svg>
        </button>
        <div class="flex-shrink-0 mr-2">
            <a href="/" class="text-primary text-2xl font-bold">Kazilet</a>
        </div>
        <div class="relative flex-1">
            <svg class="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <circle cx="11" cy="11" r="8"></circle>
                <line x1="21" y1="21" x2="16.65" y2="16.65"></line>
            </svg>
            <input type="text" id="searchInput" placeholder="Search course..." class="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-secondary focus:border-transparent">
        </div>
        <div class="flex items-center ml-2">
            <button onclick="window.location.href='/gameplay/join'" class="text-gray-700 bg-gray-100 hover:text-gray-900 hover:bg-gray-200 px-3 py-2 rounded-md text-sm font-medium">
                Join game
            </button>
            <button onclick="window.location.href='/authen/login'" class="login-btn text-secondary hover:text-primary px-3 py-2 rounded-md text-sm font-medium">
                Login
            </button>
            <button onclick="window.location.href='/authen/register'" class="register-btn bg-secondary hover:bg-primary text-white px-4 py-2 rounded-md text-sm font-medium transition duration-150 ease-in-out">
                Register
            </button>
            @* <span class="username text-secondary hover:text-primary px-3 py-2 rounded-md text-sm font-semibold" style="display: none;"></span> *@
            <div class="relative username" id="username" style="display: none;">
                <button id="usernameShow" class="text-secondary hover:text-primary px-3 py-2 rounded-md text-sm font-semibold"></button>
                <div id="userDropdown" class="absolute right-0 mt-2 w-48 bg-white rounded-md shadow-lg hidden">
                    <a href="#" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100" onclick="showChangePasswordDialog()">Change Password</a>
                    <a href="#" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100" onclick="logout()">Logout</a>
                </div>
            </div>
            @* <button onclick="logout()" class="logout-btn bg-secondary hover:bg-primary text-white px-4 py-2 rounded-md text-sm font-medium transition duration-150 ease-in-out" style="display: none;">
            Logout
            </button> *@
        </div>
    </div>
</header>
<div class="flex flex-col items-center mt-6">

    <div id="ppBox" class="flex flex-col">
        <div id="pBox" class="flex flex-col">
            <!--<div id="box" class="w-full h-56 [perspective:1000px] cursor-pointer mb-4 animate-[fade-out_2s_ease-out_1s_1_forwards] opacity-1">-->
            <div id="box" class="w-full h-56 [perspective:1000px] cursor-pointer mb-4">

                <div class="relative w-full bg-white flip-card" id="flipCard">
                    <!-- Mặt trước -->
                    <div id="front-side" class="flex justify-center items-center w-full  text-xl mb-4 border-2 border-solid border-gray-100 shadow rounded-lg p-8 backface-hidden absolute inset-0 rounded-xl shadow-xl  [transform:rotateX(180deg)]">
                        @{
                            answerLabels = "ABCDEFGHIJKLMNOPQRSTUVWXYZ".ToCharArray();
                        }

                    </div>
                    <!-- Mặt sau -->
                    <div id="back-side" class="flex flex-col justify-center w-full  text-xl border-2 border-solid border-gray-100 shadow rounded-lg p-8 inset-0 backface-hidden [transform:rotateX(0deg)]">
                        <div id="back-side-q" class="mb-2">
                        </div>
                        <div id="back-side-a" class="flex flex-col">
                        </div>
                    </div>
                </div>
            </div>
            <div>
                <div class="flex flex-row items-center justify-between">
                    <div class="flex flex-row items-center">
                        <div>
                            <button class="h-8 w-8">
                                <svg id="randomBtn" onclick="randomQuestion()" class="h-full w-full text-gray-500" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">  <path stroke="none" d="M0 0h24v24H0z" />  <polyline points="15 4 19 4 19 8" />  <line x1="14.75" y1="9.25" x2="19" y2="4" />  <line x1="5" y1="19" x2="9" y2="15" />  <polyline points="15 19 19 19 19 15" />  <line x1="5" y1="5" x2="19" y2="19" /></svg>
                            </button>
                        </div>
                    </div>
                    <div class="flex flex-row items-center justify-center">
                        <div class="mr-4">
                            <button id="prevBtn" style="display: none" onclick="getNextFlashcard('PREV')" class="border-2 border-solid border-gray-300 rounded-full">
                                <svg class="h-8 w-8 text-gray-500" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">  <path stroke="none" d="M0 0h24v24H0z" />  <line x1="5" y1="12" x2="19" y2="12" />  <line x1="5" y1="12" x2="9" y2="16" />  <line x1="5" y1="12" x2="9" y2="8" /></svg>
                            </button>
                        </div>
                        <div class="mr-4 font-medium text-lg " style="margin-bottom: 4px">
                            <span><span id="page">1</span> / <span id="total">@Model.Total</span></span>
                        </div>
                        <div style="display:none" id="courseId">@Model.CourseId</div>
                        <div style="display: none">1</div>
                        <div>
                            <button id="nextBtn" onclick="getNextFlashcard('NEXT')" class="border-2 border-solid border-gray-300 rounded-full">
                                <svg class="h-8 w-8 text-gray-500" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">  <path stroke="none" d="M0 0h24v24H0z" />  <line x1="5" y1="12" x2="19" y2="12" />  <line x1="15" y1="16" x2="19" y2="12" />  <line x1="15" y1="8" x2="19" y2="12" /></svg>
                            </button>
                        </div>
                    </div>
                    <div class="flex flex-row">

                        <div>
                            <button id="maximize" class="h-8 w-8">
                                <svg id="fullScreenBtn" onclick="fullScreenClick()" class="h-full w-full text-black" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">  <path stroke="none" d="M0 0h24v24H0z" />  <polyline points="16 4 20 4 20 8" />  <line x1="14" y1="10" x2="20" y2="4" />  <polyline points="8 20 4 20 4 16" />  <line x1="4" y1="20" x2="10" y2="14" />  <polyline points="16 20 20 20 20 16" />  <line x1="14" y1="14" x2="20" y2="20" />  <polyline points="8 4 4 4 4 8" />  <line x1="4" y1="4" x2="10" y2="10" /></svg>
                            </button>
                            <button style="display:none " id="minimize" class="h-8 w-8">
                                <svg id="minimizeBtn" class="h-full w-full text-black" onclick="fullScreenClick()" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">  <path stroke="none" d="M0 0h24v24H0z" />  <polyline points="5 9 9 9 9 5" />  <line x1="3" y1="3" x2="9" y2="9" />  <polyline points="5 15 9 15 9 19" />  <line x1="3" y1="21" x2="9" y2="15" />  <polyline points="19 9 15 9 15 5" />  <line x1="15" y1="9" x2="21" y2="3" />  <polyline points="19 15 15 15 15 19" />  <line x1="15" y1="15" x2="21" y2="21" /></svg>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div id="options">
            <div id="courseName" class="text-2xl  font-semibold">
                PRM392
            </div>
            <div class="mt-4">
                <button id="testBtn" onclick="window.location.href='/TestScreen/TestOptions?id=@Model.CourseId'" style="background:#8854c0" class="py-4 w-full cursor-pointer text-base font-semibold text-white rounded-lg px-8 shadow-xl">
                    <div class="flex justify-center items-center">
                        <div class="mr-2">
                            <svg class="h-8 w-8 text-white" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">  <path stroke="none" d="M0 0h24v24H0z" />  <rect x="5" y="3" width="14" height="18" rx="2" />  <line x1="9" y1="7" x2="15" y2="7" />  <line x1="9" y1="11" x2="15" y2="11" />  <line x1="9" y1="15" x2="13" y2="15" /></svg>
                        </div>
                        <div>
                            Test
                        </div>
                    </div>
                </button>
            </div>
            <div class="mt-4">
                <button id="hostBtn" onclick="hostGame()" style="background:#8854c0" class="py-4 w-full cursor-pointer text-base font-semibold text-white rounded-lg px-8 shadow-xl">
                    <div class="flex justify-center items-center">
                        <div class="mr-2">
                            <svg class="h-8 w-8 text-white" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">  <path stroke="none" d="M0 0h24v24H0z" />  <rect x="2" y="6" width="20" height="12" rx="2" />  <path d="M6 12h4m-2 -2v4" />  <line x1="15" y1="11" x2="15" y2="11.01" />  <line x1="18" y1="13" x2="18" y2="13.01" /></svg>
                        </div>
                        <div>
                            Host Game
                        </div>
                    </div>
                </button>
            </div>
            <div class="mt-4">
                <button id="hostBtn" onclick="editCourse()" style="background:#8854c0" class="py-4 w-full cursor-pointer text-base font-semibold text-white rounded-lg px-8 shadow-xl">
                    <div class="flex justify-center items-center">
                        <div class="mr-2">
                            <svg class="h-8 w-8 text-white" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">  <path stroke="none" d="M0 0h24v24H0z" />  <path d="M9 7 h-3a2 2 0 0 0 -2 2v9a2 2 0 0 0 2 2h9a2 2 0 0 0 2 -2v-3" />  <path d="M9 15h3l8.5 -8.5a1.5 1.5 0 0 0 -3 -3l-8.5 8.5v3" />  <line x1="16" y1="5" x2="19" y2="8" /></svg>
                        </div>
                        <div>
                            Edit Course
                        </div>
                    </div>
                </button>
            </div>
        </div>
        <div id="remain" style="width: 750px">
            <div style="width: 100%" class="text-lg  font-semibold mt-4">
                Terminology in this module (@Model.Total)
            </div>
            <div style="width: 100%" id="questions" class="mt-4">
                @for (int i = 0; i < Model.QuestionDtos.Count; i++)
                {
                    <div class="flex flex-row bg-white mb-4 border-2 border-solid border-gray-100 shadow rounded-lg p-4">
                        <div class="flex flex-col mr-2" style="width: 40%">
                            <div class="mb-2" id="@($"{Model.QuestionDtos[i].Id}question")">
                                @Model.QuestionDtos[i].Content
                            </div>
                            <div class="flex flex-col">
                                @for (int j = 0; j < Model.QuestionDtos[i].Answers.ToList().Count; j++)
                                {
                                    <div>
                                        <strong>@answerLabels[j].&nbsp;</strong>
                                        <span id="@($"{Model.QuestionDtos[i].Id}answer{j}")">@Model.QuestionDtos[i].Answers.ToList()[j].Content</span>
                                    </div>
                                }
                            </div>
                        </div>
                        <div style="width: 60%" class="flex flex-row">
                            <div style="width: 50%">
                                @for (int j = 0; j < Model.QuestionDtos[i].Answers.ToList().Count; j++)
                                {
                                    @if (@Model.QuestionDtos[i].Answers.ToList()[j].IsCorrect == true)
                                    {
                                        <div>
                                            <strong>@answerLabels[j].&nbsp;</strong>@Model.QuestionDtos[i].Answers.ToList()[j].Content
                                        </div>
                                    }
                                }
                            </div>
                            <div style="width: 50%" class="flex flex-row justify-end">

                                <div>
                                    <svg class="h-6 w-6 text-black cursor-pointer" onclick="speakerClick('@($"{Model.QuestionDtos[i].Id}speaker")')" id="@($"{Model.QuestionDtos[i].Id}speaker")" fill="currentColor" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.536 8.464a5 5 0 010 7.072m2.828-9.9a9 9 0 010 12.728M5.586 15H4a1 1 0 01-1-1v-4a1 1 0 011-1h1.586l4.707-4.707C10.923 3.663 12 4.109 12 5v14c0 .891-1.077 1.337-1.707.707L5.586 15z" />
                                    </svg>
                                </div>
                            </div>
                        </div>
                    </div>
                }

            </div>
            @if (Model.Total > 100)
            {

                <button type="button" id="btnDisplay" style="background:#8854c0" onclick="displayMore('@($"{Model.CourseId}")')" class="text-white cursor-pointer w-full bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 me-2 mb-2 dark:bg-blue-600 dark:hover:bg-blue-700 focus:outline-none dark:focus:ring-blue-800">Display @(Model.Total - 100) more</button>
            }
        </div>
    </div>
</div>

<script>
    getCourseDetail();
    function editCourse() {
        // Fetch API để lấy thông tin khóa học
        fetch(`https://localhost:7024/api/Courses/Details/` + Number(document.getElementById("courseId").innerHTML))
            .then(response => response.json())
            .then(data => {
                if (data) {
                    // Lưu trữ dữ liệu khóa học vào localStorage (hoặc sessionStorage)
                    localStorage.setItem('courseData', JSON.stringify(data));

                    // Chuyển hướng đến trang EditCourse
                    window.location.href = '/Courses/EditCourse';
                } else {
                    alert('Failed to fetch course details');
                }
            })
            .catch(error => {
                console.error('Error fetching course data:', error);
                alert('Error fetching course details');
            });
    }
    async function getCourseDetail() {
        const apiUrl = "https://localhost:7024/api/Courses/Details/" + Number(document.getElementById("courseId").innerHTML) ;
        try {
            const response = await fetch(apiUrl, {
                method: 'GET'
            })

            if (response.ok) {
                const data = await response.json();
                console.log(data);
                document.getElementById("courseName").innerHTML = data.name;
            }
        } catch (error) {
            console.log(error);
        }
    }
</script>
<script>
    function setCookie(name, value, seconds) {
        const date = new Date();
        date.setTime(date.getTime() + (seconds * 1000));
        const expires = `expires=${date.toUTCString()}`;
        document.cookie = `${name}=${value}; ${expires}; path=/`;
    }

    function getCookieV2(key) {
        const value = document.cookie;

        const cookies = value.split('; ').reduce((acc, cookie) => {
            const [k, v] = cookie.split('=');
            acc[k] = decodeURIComponent(v);
            return acc;
        }, {});

        return cookies[key];
    }

    function deleteCookie(name) {
        document.cookie = `${name}=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;`;
    }
    function logout() {
        deleteCookie("accessToken");
        handleAuthUI();
    }

    // Function to check if the access token is valid
    async function isAccessTokenValid() {
        const token = getCookieV2('accessToken');
        if (!token) return false;

        try {
            const response = await fetch('https://localhost:7024/api/Authentication/check', {
                method: 'GET',
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json',
                }
            });

            if (!response.ok) throw new Error('Error validating token');

            const data = await response.json();

            const usernameDisplay = document.getElementById('usernameShow');
            const username = data.username;
            usernameDisplay.innerHTML = 'Hello, ' + username;
            return true;
        } catch (error) {
            console.error('Error making request:', error);
            return false;
        }
    }

    // Function to handle the authentication UI
    async function handleAuthUI() {
        const loginButton = document.querySelector('.login-btn');
        const registerButton = document.querySelector('.register-btn');
        const usernameDisplay = document.querySelector('.username');

        const isValid = await isAccessTokenValid();

        if (isValid) {
            loginButton.style.display = 'none';
            registerButton.style.display = 'none';
            usernameDisplay.style.display = 'inline-block';
        } else {
            deleteCookie("accessToken");
            loginButton.style.display = 'inline-block';
            registerButton.style.display = 'inline-block';
            usernameDisplay.style.display = 'none';
        }
    }

    // Function to handle sidebar toggling
    function updateSidebar() {
        const sidebar = document.getElementById('sidebar');
        const mainContent = document.querySelector('.ml-0.md\\:ml-64');
        const mobileMenuToggle = document.getElementById('mobileMenuToggle');
        const collapseSidebar = document.getElementById('collapseSidebar');
        const menuText = document.getElementById('menuText');
        const menuItemTexts = document.querySelectorAll('.menuItemText');

        let isSidebarCollapsed = false;
        let isSidebarOpen = window.innerWidth > 768;

        if (window.innerWidth <= 768) {
            sidebar.classList.toggle('-translate-x-full', !isSidebarOpen);
            sidebar.classList.toggle('translate-x-0', isSidebarOpen);
            mainContent.classList.remove('md:ml-64', 'md:ml-16');
            mobileMenuToggle.classList.remove('hidden');
            collapseSidebar.classList.add('hidden');
        } else {
            sidebar.classList.remove('-translate-x-full');
            sidebar.classList.add('translate-x-0');
            sidebar.classList.toggle('w-64', !isSidebarCollapsed);
            sidebar.classList.toggle('w-16', isSidebarCollapsed);
            mainContent.classList.toggle('md:ml-64', !isSidebarCollapsed);
            mainContent.classList.toggle('md:ml-16', isSidebarCollapsed);
            mobileMenuToggle.classList.add('hidden');
            collapseSidebar.classList.toggle('hidden', isSidebarCollapsed);
        }

        menuText.classList.toggle('hidden', isSidebarCollapsed);
        menuItemTexts.forEach(text => text.classList.toggle('hidden', isSidebarCollapsed));
    }

    // Debounced resize event listener to optimize performance
    let resizeTimeout;
    window.addEventListener('resize', () => {
        clearTimeout(resizeTimeout);
        resizeTimeout = setTimeout(updateSidebar, 200);
    });

    // Function to toggle sidebar state
    function toggleSidebarState() {
        isSidebarOpen = !isSidebarOpen;
        updateSidebar();
    }

    // Event listener for DOMContentLoaded to initialize UI
    document.addEventListener('DOMContentLoaded', () => {
        handleAuthUI();

        const userMenu = document.getElementById('username');
        const userMenuButton = document.getElementById('usernameShow');
        const userDropdown = document.getElementById('userDropdown');
        const changePasswordDialog = document.getElementById('changePasswordDialog');
        const changePasswordBtn = document.getElementById('changePasswordBtn');
        const changeErrorMessage = document.getElementById('changeErrorMessage');

        const oldPwd = document.getElementById('oldPwd');
        const newPwd = document.getElementById('newPwd');
        const cfPwd = document.getElementById('cfPwd');

        //User dropdown
        userMenuButton.addEventListener('click', function () {
            userDropdown.classList.toggle('hidden');
        });

        document.addEventListener('click', function (event) {
            if (!userMenu.contains(event.target)) {
                userDropdown.classList.add('hidden');
            }
        });

        //Change password handle
        oldPwd.addEventListener('input', () => {
            changePasswordBtn.disabled = (!oldPwd.value || !newPwd.value || !cfPwd.value);
        });

        newPwd.addEventListener('input', () => {
            changePasswordBtn.disabled = (!oldPwd.value || !newPwd.value || !cfPwd.value);
        });

        cfPwd.addEventListener('input', () => {
            changePasswordBtn.disabled = (!oldPwd.value || !newPwd.value || !cfPwd.value);
        });

        window.showChangePasswordDialog = function () {
            changePasswordDialog.classList.remove('hidden');
        };

        changePasswordBtn.addEventListener('click', async function () {
            const oldPassword = oldPwd.value;
            const newPassword = newPwd.value;
            const confirmPassword = cfPwd.value;

            if (newPassword !== confirmPassword) {
                changeErrorMessage.textContent = 'New password and confirm password do not match.';
                changeErrorMessage.classList.remove('hidden');
                return;
            }

            const apiUrl = 'https://localhost:7024/api/Authentication/change';

            try {
                const token = getCookieV2('accessToken');
                if (!token) {
                    deleteCookie("accessToken");
                    handleAuthUI();
                }
                const response = await fetch(apiUrl, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${token}`
                    },
                    body: JSON.stringify(newPassword)
                });

                if (!response.ok) {
                    changeErrorMessage.textContent = response.text;
                    changeErrorMessage.classList.remove('hidden');
                } else {
                    changeErrorMessage.textContent = '';
                    changeErrorMessage.classList.add('hidden');
                    changePasswordDialog.classList.add('hidden');
                    alert("Change password successfully");
                    deleteCookie("accessToken");
                    window.location.href = '/authen/login';
                }
            } catch (error) {
                changeErrorMessage.textContent = error;
                changeErrorMessage.classList.remove('hidden');
            }
        });

        changePasswordDialog.addEventListener('click', function (event) {
            if (event.target === changePasswordDialog) {
                changePasswordDialog.classList.add('hidden');
            }
        });

        //Search input handle
        const input = document.getElementById("searchInput");
        input.addEventListener("keydown", function (event) {
            if (event.key === "Enter") {
                event.preventDefault();
                if (input.value != '') {
                    window.location.href = '/courses?search=' + input.value;
                }
            }
        });

        // Sidebar toggle event listeners
        const sidebar = document.getElementById('sidebar');
        const toggleSidebar = document.getElementById('toggleSidebar');
        const collapseSidebar = document.getElementById('collapseSidebar');
        const mobileMenuToggle = document.getElementById('mobileMenuToggle');
        const menuText = document.getElementById('menuText');
        const menuItemTexts = document.querySelectorAll('.menuItemText');
        const mainContent = document.querySelector('.ml-0.md\\:ml-64');

        let isSidebarCollapsed = false;
        let isSidebarOpen = window.innerWidth > 768;

        function updateSidebar() {
            if (window.innerWidth <= 768) {
                sidebar.classList.toggle('-translate-x-full', !isSidebarOpen);
                sidebar.classList.toggle('translate-x-0', isSidebarOpen);
                mainContent.classList.remove('md:ml-64', 'md:ml-16');
                mobileMenuToggle.classList.remove('hidden');
                collapseSidebar.classList.add('hidden');
            } else {
                sidebar.classList.remove('-translate-x-full');
                sidebar.classList.add('translate-x-0');
                sidebar.classList.toggle('w-64', !isSidebarCollapsed);
                sidebar.classList.toggle('w-16', isSidebarCollapsed);
                mainContent.classList.toggle('md:ml-64', !isSidebarCollapsed);
                mainContent.classList.toggle('md:ml-16', isSidebarCollapsed);
                mobileMenuToggle.classList.add('hidden');
                collapseSidebar.classList.toggle('hidden', isSidebarCollapsed);
            }

            menuText.classList.toggle('hidden', isSidebarCollapsed);
            menuItemTexts.forEach(text => {
                text.classList.toggle('hidden', isSidebarCollapsed);
            });
        }

        function toggleSidebarState() {
            if (window.innerWidth <= 768) {
                isSidebarOpen = !isSidebarOpen;
            } else {
                isSidebarCollapsed = !isSidebarCollapsed;
            }
            updateSidebar();
        }

        window.addEventListener('resize', updateSidebar);
        updateSidebar();
    });

</script>
<script>
    const flipCard = document.getElementById('flipCard');
    var isRandom = false;
    var iFullScreen = false;
    var questions = [];

    flipCard.addEventListener('click', function () {
        flipCard.classList.toggle('flipped');
    });
    getMode();
    initialAction();



    function initialAction() {
        if (!isRandom) {
            getQuestionFlashcard(Number(document.getElementById("page").innerHTML));
        }
        else {
            var randomBtn = document.getElementById("randomBtn");

            randomBtn.classList.remove("text-gray-500");
            randomBtn.classList.add("text-black");
            for (var i = 0; i < questions.length; i++) {
                if (questions[i].page == Number(document.getElementById("page").innerHTML)) {
                    getQuestionFlashcard(questions[i].questionId);
                }
            }
        }
    }

    function getMode() {
        var keyArr = JSON.parse(getCookie('kazilet'));
        var key = null;
        var courseId = Number(document.getElementById("courseId").innerHTML);

        if (keyArr) {
            for (var i = 0; i < keyArr.length; i++) {
                if (keyArr[i].id == courseId) {
                    key = keyArr[i].property; // Chỉ cần lấy property mà không cần JSON.parse
                }
            }
        }

        if (key) {
            var attributes = key.split('%');

            for (var i = 0; i < attributes.length; i++) {
                var attribute = attributes[i].trim();
                if (attribute.startsWith("isFullScreen=")) {
                    var value = attribute.split('=')[1];
                    iFullScreen = (value === 'false');
                    fullScreenClick();
                } else if (attribute.startsWith("isRandom=")) {
                    var value = attribute.split('=')[1];
                    isRandom = (value === 'true');
                } else if (attribute.startsWith("page=")) {
                    var value = attribute.split('=')[1];
                    document.getElementById("page").innerHTML = Number(value);
                    if (Number(value) > 1) {
                        document.getElementById("prevBtn").style.display = "block";
                    }
                } else if (attribute.startsWith("questions=")) {
                    var value = attribute.split('=')[1];
                    // Chuyển đổi chuỗi JSON thành mảng
                    var questionsArray = JSON.parse(value);
                    console.log(questionsArray); // Kiểm tra mảng
                    questions = questionsArray;
                }
            }
        }
    }

    function setMode(key, value) {
        // Lấy cookie kazilet hiện tại
        var cookieValueArr = JSON.parse(getCookie('kazilet')) || []; // Chuyển đổi chuỗi cookie thành mảng
        var properties = {};
        var courseId = Number(document.getElementById("courseId").innerHTML);
        var existingIndex = cookieValueArr.findIndex(cookie => cookie.id == courseId);

        // Nếu cookie đã tồn tại, tách các thuộc tính
        var cookieValue = existingIndex !== -1 ? cookieValueArr[existingIndex].property : null;
        if (cookieValue) {
            cookieValue.split('%').forEach(function (prop) {
                var [k, v] = prop.split('=');
                if (k && v) {
                    properties[k.trim()] = v.trim();
                }
            });
        }

        // Cập nhật hoặc thêm mới thuộc tính
        if (key === 'questions') {
            // Nếu giá trị là mảng, chuyển đổi mảng thành chuỗi JSON
            properties[key] = JSON.stringify(value);
        } else {
            properties[key] = value;
        }

        // Tạo lại cookie với các thuộc tính đã được cập nhật
        var updatedCookie = Object.entries(properties).map(([k, v]) => `${k}=${v}`).join('%');

        if (existingIndex !== -1) {
            cookieValueArr[existingIndex].property = updatedCookie; // Cập nhật property
        } else {
            cookieValueArr.push({ id: courseId, property: updatedCookie }); // Thêm mới nếu không tồn tại
        }

        console.log(cookieValueArr);
        var storedCookie = JSON.stringify(cookieValueArr);
        document.cookie = `kazilet=${storedCookie}`;
    }


    function getCookie(key) {
        const name = key + "=";
        const decodedCookie = document.cookie;
        const cookiesArray = decodedCookie.split(';');

        for (let i = 0; i < cookiesArray.length; i++) {
            let cookie = cookiesArray[i].trim();
            if (cookie.indexOf(name) === 0) {
                return cookie.substring(name.length, cookie.length);
            }
        }

        return null;
    }



    function fullScreen() {
        var page = Number(document.getElementById("page").innerHTML);
        var box = document.getElementById("box");
        var backSide = document.getElementById("back-side");
        var pBox = document.getElementById("pBox");
        var ppBox = document.getElementById("ppBox");
        if (iFullScreen) {
            box.classList.remove("h-56"); // Bỏ lớp có chiều cao cố định
            backSide.style.padding = "100px";
            backSide.style.fontSize = "30px";
            pBox.style.width = "80%";
            pBox.style.marginRight = "10%";
            pBox.style.marginLeft = "10%";
            ppBox.classList.add("w-full"); // Thêm lớp CSS thay đổi kích thước
        } else {
            box.classList.add("h-56"); // Thêm lại lớp có chiều cao cố định
            backSide.style.padding = "2rem";
            backSide.style.fontSize = "1.25rem";
            pBox.removeAttribute("style");
            ppBox.classList.remove("w-full"); // Bỏ lớp CSS thay đổi kích thước
        }

        if (!isRandom)
            getQuestionFlashcard(page);
        else
            getRandomFlashcard(page);
    }

    function fullScreenClick() {
        var fullScreenBtn = document.getElementById("fullScreenBtn");
        var maximize = document.getElementById("maximize");
        var minimize = document.getElementById("minimize");
        if (fullScreenBtn) {
            if (!iFullScreen) {
                minimize.style.display = "block";
                maximize.style.display = "none";
                document.getElementById("options").style.display = "none";
                document.getElementById("remain").style.display = "none";
                setMode('isFullScreen', 'true');
            } else {
                maximize.style.display = "block";
                minimize.style.display = "none";
                document.getElementById("remain").style.display = "block";
                document.getElementById("options").style.display = "block";
                setMode('isFullScreen', 'false');
            }
            iFullScreen = !iFullScreen;
            fullScreen();
        }
    }

    function randomQuestion() {
        var randomBtn = document.getElementById("randomBtn");
        if (randomBtn) {
            if (randomBtn.classList.contains("text-gray-500")) {
                randomBtn.classList.remove("text-gray-500");
                randomBtn.classList.add("text-black");
                isRandom = true;
                setMode('isRandom', 'true');
            } else {
                randomBtn.classList.add("text-gray-500");
                randomBtn.classList.remove("text-black");
                isRandom = false;
                setMode('isRandom', 'false');
            }
        }
    }

    function getRandomInt(min, max) {
        min = Math.ceil(min);
        max = Math.floor(max);
        return Math.floor(Math.random() * (max - min + 1)) + min;
    }

    function getRandomFlashcard(page) {
        console.log("true");
        var total = Number(document.getElementById("total").innerHTML);
        var nextPage = getRandomInt(page, total);
        while (questions.find(q => q.questionId === nextPage)) {
            nextPage = getRandomInt(page, total);
        }
        let result = questions.find(q => q.page === page);
        if (result) {
            getQuestionFlashcard(result.questionId);
        }
        else {
            getQuestionFlashcard(nextPage);
            let questionData = {
                page: page,
                questionId: nextPage
            };
            questions.push(questionData);
            setMode("questions", questions);
        }

    }

    function getNextFlashcard(action) {
        var page = Number(document.getElementById("page").innerHTML);
        var total = Number(document.getElementById("total").innerHTML);
        var prevBtn = document.getElementById("prevBtn");
        var nextBtn = document.getElementById("nextBtn");
        if (action == 'NEXT') {
            page++;
            if (!isRandom) {
                getQuestionFlashcard(page);
                questions = [];
            }
            else
                getRandomFlashcard(page);
        }
        else {
            page--;
            if (!isRandom) {
                getQuestionFlashcard(page);
                questions = [];
            }
            else
                getRandomFlashcard(page);
        }
        setMode('page', page);
        document.getElementById("page").innerHTML = page;
        if (page == total) {
            nextBtn.style.display = "none";
        }
        else if (page == 1) {
            prevBtn.style.display = "none";
        }
        else {
            nextBtn.style.display = "block";
            prevBtn.style.display = "block";
        }
    }

    async function getQuestionFlashcard(id) {
        var page = Number(document.getElementById("page").innerHTML);
        var courseId = Number(document.getElementById("courseId").innerHTML);
        setMode('question', id);
        var flipCard = document.getElementById("flipCard");
        if (flipCard.classList.contains("flipped")) {
            flipCard.classList.remove("flipped");
        }
        const apiUrl = "https://localhost:7024/odata/Question?questionNumber=" + id + "&courseId=" + courseId + "&$expand=Answers";
        try {
            const response = await fetch(apiUrl, {
                method: 'GET'
            })
            if (response.ok) {

                const data = await response.json();
                var frontSide = $("#front-side"); // jQuery object
                var backSideA = $("#back-side-a"); // jQuery object
                var backSideQ = $("#back-side-q"); // jQuery object
                frontSide.html("");
                backSideQ.html(data.Content); // jQuery method to set innerHTML
                backSideA.html("");
                var answerDivBack;
                var answerLabels = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
                for (var i = 0; i < data.Answers.length; i++) {
                    if (iFullScreen)
                        answerDivBack = $("<div style=\"margin-top: 30px\"><strong>" + answerLabels.charAt(i) + ".&nbsp;</strong><span>" + data.Answers[i].Content + "</span></div>");
                    else
                        answerDivBack = $("<div style=\"margin-top: 4px\"><strong>" + answerLabels.charAt(i) + ".&nbsp;</strong><span>" + data.Answers[i].Content + "</span></div>");
                    backSideA.append(answerDivBack);

                    if (data.Answers[i].IsCorrect) {
                        var answerDivFront = $("<div><strong>" + answerLabels.charAt(i) + ".&nbsp;</strong><span>" + data.Answers[i].Content + "</span></div>");
                        frontSide.append(answerDivFront);
                    }
                }


            }
        } catch (error) {
            console.log(error);
        }
    }

    function fillYellow(id) {
        if (document.getElementById(id).classList.contains("text-yellow-300")) {
            document.getElementById(id).classList.remove("text-yellow-300");
            document.getElementById(id).classList.add("text-black");
        }
        else {
            document.getElementById(id).classList.add("text-yellow-300");
            document.getElementById(id).classList.remove("text-black");
        }
    }

    function starClick(id) {
        fillYellow(id);
    }

    function speakerClick(id) {
        fillYellow(id);
        var i = 0;
        var answerLabels = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        var input = "";
        var ids = id.replace('speaker', '');

        input += document.getElementById(ids + "question").innerHTML;

        const elements = document.querySelectorAll('[id^="' + (ids + "answer") + '"]');

        elements.forEach(element => {
            input += (answerLabels.charAt(i) + element.innerHTML);
            i++;
        });
        getAudioForText(input, id);
    }



    function hostGame() {

        window.location.href = "https://localhost:7081/Gameplay/Host?courseId=" + document.getElementById("courseId").innerHTML;
    }



    async function displayMore(id) {
        var questionEle = document.getElementById("questions");
        const apiUrl = "https://localhost:7024/odata/Question/" + id + "?$skip=100&$expand=Answers&$count=true";
        try {
            const response = await fetch(apiUrl, {
                method: 'GET'
            })
            if (!response.ok) {
                throw new Error("Error");
            }

            const data = await response.json();
            const questions = data.value;
            console.log(questions);

            for (var i = 0; i < questions.length; i++) {
                let pparentDiv = $("<div></div>")
                    .addClass("flex flex-row mb-4 border-2 border-solid border-gray-100 shadow rounded-lg p-4")

                let parentDiv1 = $("<div style=\"width: 40%\"></div>")
                    .addClass("flex flex-col mr-2")

                let parentDiv2 = $("<div style=\"width: 60%\"></div>")
                    .addClass("flex flex-row")

                let pAnswerDiv = $("<div></div>").addClass("flex flex-col")
                let pAnswerTrueDiv = $("<div style=\"width: 50%\"></div>")
                let pSvgTrueDiv = $("<div style=\"width: 50%\"></div>").addClass("flex flex-row justify-end");


                let questionDiv = $("<div></div>")
                    .addClass("mb-2")
                    .attr("id", questions[i].Id + "question")
                    .text(questions[i].Content);

                parentDiv1.append(questionDiv);
                pparentDiv.append(parentDiv1);

                for (var j = 0; j < questions[i].Answers.length; j++) {
                    var answerLabels = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
                    let answerDiv = $("<div><strong>" + answerLabels[j] + ".&nbsp;</strong><span>" + questions[i].Answers[j].Content + "</span></div>");
                    pAnswerDiv.append(answerDiv);

                    let answerTrueDiv = $("<div><strong>" + answerLabels[j] + ".&nbsp;</strong><span>" + questions[i].Answers[j].Content + "</span></div>");
                    if (questions[i].Answers[j].IsCorrect) {
                        pAnswerTrueDiv.append(answerTrueDiv);

                        let svgDiv = $(`

                                                                                                                                                                                                        <div>
                                                                                                                                                                                                                        <svg class="h-6 w-6 text-black cursor-pointer" onclick="speakerClick('${questions[i].Id}speaker')" id="${questions[i].Id}speaker" fill="currentColor" viewBox="0 0 24 24" stroke="currentColor">
                                                                                                                                                                                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.536 8.464a5 5 0 010 7.072m2.828-9.9a9 9 0 010 12.728M5.586 15H4a1 1 0 01-1-1v-4a1 1 0 011-1h1.586l4.707-4.707C10.923 3.663 12 4.109 12 5v14c0 .891-1.077 1.337-1.707.707L5.586 15z"></path>
                                                                                                                                                                                                            </svg>
                                                                                                                                                                                                        </div>
                                                                                                                                                                                                    `);
                        pSvgTrueDiv.append(svgDiv);
                        parentDiv2.append(pAnswerTrueDiv);
                        parentDiv2.append(pSvgTrueDiv);
                    }
                }
                pparentDiv.append(parentDiv2);
                parentDiv1.append(pAnswerDiv);

                questionEle.append(pparentDiv.get(0));
            }
            document.getElementById("btnDisplay").style.display = "none";
        } catch (error) {
            console.log(error);
        }
    }
    var audio;
    var speaker = new Audio();

    async function getAudioForText(input, id) {


        const apiUrl = "https://api.zalo.ai/v1/tts/synthesize";
        const apiKey = "Feqez0TEKKHFJnWAxrBUd7fgXbP2qgxd";
        //const apiKey = "Uc4r3fd4QDeiFwOvY5WKxQSnIMRbAsE6";
        //const apiKey = "XpzAfz1iaeQmrSeAbs0z8iMW0sQgUgNs";
        //const apiKey = "UY9YfLK4kExVY77jb87TJ3mzoAyBBRFm";
        try {
            const response = await fetch(apiUrl, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'apikey': apiKey
                },
                body: new URLSearchParams({
                    'input': input
                })
            })
            if (!response.ok) {
                throw new Error("Error");
            }
            else {
                var data = await response.json();
                var audioUrl = data.data.url;
                //playAudio(audioUrl, id);
                setTimeout(async () => {
                    speaker.src = audioUrl + ".mp3";
                    speaker.preload = 'auto';

                    try {
                        await speaker.play();
                    } catch (error) {
                        console.error("Playback error:", error);
                    }
                }, 1000);

            }

        } catch (error) {
            console.log(error);
        }

    }

    const audioContext = new (window.AudioContext || window.webkitAudioContext)();
    var currentSource;
    async function playAudio(url, id) {
        try {
            // Kiểm tra nếu AudioContext đang tạm dừng
            if (audioContext.state === 'suspended') {
                await audioContext.resume();
            }

            // Dừng âm thanh hiện tại nếu có
            if (currentSource) {
                currentSource.stop(); // Dừng source hiện tại
            }

            // Gọi API và nhận dữ liệu âm thanh
            const response = await fetch(url);
            const arrayBuffer = await response.arrayBuffer();
            const buffer = await audioContext.decodeAudioData(arrayBuffer);

            // Tạo một source mới
            currentSource = audioContext.createBufferSource();
            currentSource.buffer = buffer;
            currentSource.connect(audioContext.destination);

            // Thêm sự kiện lắng nghe cho sự kiện 'ended'
            currentSource.onended = () => {
                fillYellow(id); // Gọi hàm fillYellow khi âm thanh kết thúc
            };

            // Bắt đầu phát âm thanh
            currentSource.start();
        } catch (error) {
            console.error('Error playing audio:', error);
        }
    }
</script>
