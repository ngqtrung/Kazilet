@page
@model PRN231_Kazilet_WebApp.Pages.Gameplay.HostModel
@{
}

<style>
    td {
        padding-top: 10px;
        padding-bottom: 10px;
    }

    th {
        padding-top: 10px;
        padding-bottom: 10px;
    }
</style>


<div id="header">
    <div id="changePasswordDialog" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center hidden">
        <div class="bg-gray-800 p-8 rounded-lg shadow-xl w-full max-w-md">
            <h3 class="text-2xl font-bold text-white mb-4">Change password</h3>
            <form class="mt-3" id="changePasswordForm">
                <div class="mb-4">
                    <label for="oldPwd" class="block text-sm font-medium text-gray-300 mb-2">Old Password</label>
                    <input type="password" id="oldPwd" name="oldPwd" required
                           class="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-secondary">
                    <label for="newPwd" class="block text-sm font-medium text-gray-300 mb-2">New Password</label>
                    <input type="password" id="newPwd" name="newPwd" required
                           class="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-secondary">
                    <label for="cfPwd" class="block text-sm font-medium text-gray-300 mb-2">Confirm Password</label>
                    <input type="password" id="cfPwd" name="cfPwd" required
                           class="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-secondary">
                </div>
                <div id="changeErrorMessage" class="mb-4 text-red-500 text-sm hidden"></div>
                <button type="button" id="changePasswordBtn" disabled
                        class="w-full bg-secondary text-white py-2 px-4 rounded-md hover:bg-secondary-dark transition duration-300 disabled:opacity-50 disabled:cursor-not-allowed">
                    Change Password
                </button>
            </form>
        </div>
    </div>
    <header class="border-b border-gray-200 sticky top-0 bg-white z-10">
        <div class="container mx-auto px-4 py-4 flex items-center">
            <button id="mobileMenuToggle" class="mr-2 md:hidden text-primary hover:text-secondary focus:outline-none">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
                </svg>
            </button>
            <div class="flex-shrink-0 mr-2">
                <a href="/" class="text-primary text-2xl font-bold">Kazilet</a>
            </div>
            <div class="relative flex-1">
                <svg class="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <circle cx="11" cy="11" r="8"></circle>
                    <line x1="21" y1="21" x2="16.65" y2="16.65"></line>
                </svg>
                <input type="text" id="searchInput" placeholder="Search course..." class="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-secondary focus:border-transparent">
            </div>
            <div class="flex items-center ml-2">
                <button onclick="window.location.href='/gameplay/join'" class="text-gray-700 bg-gray-100 hover:text-gray-900 hover:bg-gray-200 px-3 py-2 rounded-md text-sm font-medium">
                    Join game
                </button>
                <button onclick="window.location.href='/authen/login'" class="login-btn text-secondary hover:text-primary px-3 py-2 rounded-md text-sm font-medium">
                    Login
                </button>
                <button onclick="window.location.href='/authen/register'" class="register-btn bg-secondary hover:bg-primary text-white px-4 py-2 rounded-md text-sm font-medium transition duration-150 ease-in-out">
                    Register
                </button>
                @* <span class="username text-secondary hover:text-primary px-3 py-2 rounded-md text-sm font-semibold" style="display: none;"></span> *@
                <div class="relative username" id="username" style="display: none;">
                    <button id="usernameShow" class="text-secondary hover:text-primary px-3 py-2 rounded-md text-sm font-semibold"></button>
                    <div id="userDropdown" class="absolute right-0 mt-2 w-48 bg-white rounded-md shadow-lg hidden">
                        <a href="#" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100" onclick="showChangePasswordDialog()">Change Password</a>
                        <a href="#" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100" onclick="logout()">Logout</a>
                    </div>
                </div>
                @* <button onclick="logout()" class="logout-btn bg-secondary hover:bg-primary text-white px-4 py-2 rounded-md text-sm font-medium transition duration-150 ease-in-out" style="display: none;">
                Logout
                </button> *@
            </div>
        </div>
    </header>
</div>
<div id="background" style="background-color:#471b43; height: 850px; padding-left: 128px; padding-right: 128px; padding-top: 2rem">
    <div id="lobby">
        <!-- drawer init and toggle -->
        <div>
            <div class="flex justify-start">
                <button onclick="getAvatars()" style="background: #8854c0" class="text-white focus:ring-4 focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 mb-2 dark:bg-blue-600 dark:hover:bg-blue-700 focus:outline-none dark:focus:ring-blue-800" type="button" data-drawer-target="drawer-right-example" data-drawer-show="drawer-right-example" data-drawer-placement="right" aria-controls="drawer-right-example">
                    <svg class="h-8 w-8" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">  <line x1="3" y1="12" x2="21" y2="12" />  <line x1="3" y1="6" x2="21" y2="6" />  <line x1="3" y1="18" x2="21" y2="18" /></svg>
                </button>
            </div>

            <!-- drawer component -->
            <div id="drawer-right-example" class="fixed top-0 right-0 z-40 h-screen p-4 overflow-y-auto transition-transform translate-x-full bg-white w-80 dark:bg-gray-800" tabindex="-1" aria-labelledby="drawer-right-label">
                <h5 id="drawer-right-label" class="inline-flex items-center mb-4 text-base font-semibold text-gray-500 dark:text-gray-400">
                    <svg class="h-4 w-4 me-2.5" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">  <path stroke="none" d="M0 0h24v24H0z" />  <path d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 0 0 2.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 0 0 1.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 0 0 -1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 0 0 -2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 0 0 -2.573 -1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 0 0 -1.065 -2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 0 0 1.066 -2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z" />  <circle cx="12" cy="12" r="3" /></svg>
                    Setting
                </h5>
                <button type="button" data-drawer-hide="drawer-right-example" aria-controls="drawer-right-example" class="text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm w-8 h-8 absolute top-2.5 end-2.5 inline-flex items-center justify-center dark:hover:bg-gray-600 dark:hover:text-white">
                    <svg class="w-3 h-3" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 14 14">
                        <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 1 6 6m0 0 6 6M7 7l6-6M7 7l-6 6" />
                    </svg>
                    <span class="sr-only">Close menu</span>
                </button>
                <div class="mb-6">
                    <div class="mb-4">
                        <div class="flex items-center">
                            <div class="mr-2 mt-2">
                                <label for="avatar" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Your Avatar</label>
                            </div>
                            <div>
                                <img id="playerAvatar" class="h-12 w-12 rounded-full" src="~/images/avatar1.jpg" />
                            </div>
                        </div>
                        <div class="flex flex-wrap">
                            <div>
                                <img id="avatar1" style="border: 1px solid gray" class="h-12 w-12 p-1 rounded-full mr-2 mb-2 cursor-pointer" src="~/images/avatar1.jpg" />
                            </div>
                            <div>
                                <img id="avatar2" style="border: 1px solid gray" class="h-12 w-12 p-1 rounded-full mr-2 mb-2 cursor-pointer" src="~/images/avatar2.jpg" />
                            </div>
                            <div>
                                <img id="avatar3" style="border: 1px solid gray" class="h-12 w-12 p-1 rounded-full mr-2 mb-2 cursor-pointer" src="~/images/avatar3.jpg" />
                            </div>
                            <div>
                                <img id="avatar4" style="border: 1px solid gray" class="h-12 w-12 p-1 rounded-full mr-2 mb-2 cursor-pointer" src="~/images/avatar4.jpg" />
                            </div>
                            <div>
                                <img id="avatar5" style="border: 1px solid gray" class="h-12 w-12 p-1 rounded-full mr-2 mb-2 cursor-pointer" src="~/images/avatar5.jpg" />
                            </div>
                            <div>
                                <img id="avatar6" style="border: 1px solid gray" class="h-12 w-12 p-1 rounded-full mr-2 mb-2 cursor-pointer" src="~/images/avatar6.jpg" />
                            </div>
                            <div>
                                <img id="avatar7" style="border: 1px solid gray" class="h-12 w-12 p-1 rounded-full mr-2 mb-2 cursor-pointer" src="~/images/avatar7.jpg" />
                            </div>
                            <div>
                                <img id="avatar8" style="border: 1px solid gray" class="h-12 w-12 p-1 rounded-full mr-2 mb-2 cursor-pointer" src="~/images/avatar8.jpg" />
                            </div>
                            <div>
                                <img id="avatar9" style="border: 1px solid gray" class="h-12 w-12 p-1 rounded-full mr-2 mb-2 cursor-pointer" src="~/images/avatar9.jpg" />
                            </div>
                            <div>
                                <img id="avatar10" style="border: 1px solid gray" class="h-12 w-12 p-1 rounded-full mr-2 mb-2 cursor-pointer" src="~/images/avatar10.jpg" />
                            </div>
                            <div>
                                <img id="avatar11" style="border: 1px solid gray" class="h-12 w-12 p-1 rounded-full mr-2 mb-2 cursor-pointer" src="~/images/avatar11.jpg" />
                            </div>
                            <div>
                                <img id="avatar12" style="border: 1px solid gray" class="h-12 w-12 p-1 rounded-full mr-2 mb-2 cursor-pointer" src="~/images/avatar12.jpg" />
                            </div>
                            <div>
                                <img id="avatar13" style="border: 1px solid gray" class="h-12 w-12 p-1 rounded-full mr-2 mb-2 cursor-pointer" src="~/images/avatar13.jpg" />
                            </div>
                            <div>
                                <img id="avatar14" style="border: 1px solid gray" class="h-12 w-12 p-1 rounded-full mr-2 mb-2 cursor-pointer" src="~/images/avatar14.jpg" />
                            </div>
                            <div>
                                <img id="avatar15" style="border: 1px solid gray" class="h-12 w-12 p-1 rounded-full mr-2 mb-2 cursor-pointer" src="~/images/avatar15.jpg" />
                            </div>
                        </div>
                    </div>
                    <div class="mb-6">
                        <label for="time" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Time Limit</label>
                        <select id="time" class="block w-full p-2 mb-6 text-sm text-gray-900 border border-gray-300 rounded-lg bg-gray-50 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500">
                            <option value="10">10 seconds</option>
                            <option selected value="15">15 seconds</option>
                            <option value="20">20 seconds</option>
                            <option value="25">25 seconds</option>
                            <option value="30">30 seconds</option>
                        </select>
                    </div>
                    <div class="mb-6">
                        <label for="subject" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">No Questions</label>
                        <input type="number" id="noq" value="20" min="20" max="50" "" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500" placeholder="Let us know how we can help you" required />
                    </div>
                    <button data-drawer-hide="drawer-right-example" aria-controls="drawer-right-example" onclick="saveSetting()" style="background: #8854c0" type="button" class="text-white bg-blue-700 hover:bg-blue-800 w-full focus:ring-4 focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 mb-2 dark:bg-blue-600 dark:hover:bg-blue-700 focus:outline-none dark:focus:ring-blue-800 block">
                        Save

                    </button>
                </div>
            </div>
        </div>
        <div class="flex items-center justify-center">
            <div class="w-full max-w-3xl rounded-lg overflow-hidden">

                <div class="p-6 text-center">
                    <h1 class="text-4xl font-bold text-white mb-2">GAME PIN</h1>
                    <div class="text-7xl font-bold text-white tracking-wider">@Model.Code</div>
                </div>
                <div class="p-8 text-center">
                    <p class="text-xl text-white mb-8">Waiting for players to join...</p>
                    <button onclick="start()" style="background:#8854c0" class="text-white text-2xl font-semibold p-6 rounded-full transition duration-300 ease-in-out transform hover:scale-105">
                        Start Game
                    </button>
                </div>
                <div id="token" style="display:none">@Model.Token</div>
                <div id="usernameInputText" style="display:none">@Model.Username</div>
                <div id="code" style="display:none">@Model.Code</div>
                <div class="p-6 bg-gray-100 rounded-lg">
                    <h2 class="text-2xl bg-white font-bold text-purple-800 mb-4">Players Joined: <span id="no-players">0</span></h2>
                    <div id="playerDiv" class="flex justify-center flex-wrap">
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!--count down-->
    <div id="countdown" style="display:none" class="flex items-center justify-center p-8 w-full h-full">
        <div id="countDisplay" class="text-9xl font-bold text-white transition-all duration-300 ease-in-out transform animate-pop">
            Are you ready?
        </div>
    </div>

    <!--get question-->
    <div style="display:none" id="question">
        <div style="height: 45px" class="mb-8 flex justify-between">
            <div class="flex items-center">
                <div id="questionStatus" style="border: 1px solid gray; background:#696868" class="border-2 mr-2 p-2 text-white w-fit border-solid !border-black shadow rounded-lg bg-black">
                    8 / 10
                </div>
                <div class="rounded-full mr-2" style="height: 35px; width: 800px; background:#696868">
                    <div id="pointStreak" class="bg-purple-500 text-base font-medium text-white text-right leading-none rounded-full" style="width: 45%; padding-top: 10px;height: 100%; padding-right:10px">
                        +200 points
                    </div>
                </div>
                <div style="background:#696868" class="flex items-center rounded-full px-4 py-2">
                    <div>
                        <svg class="h-8 w-8 text-orange-500 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 18.657A8 8 0 016.343 7.343S7 9 9 10c0-2 .5-5 2.986-7C14 5 16.09 5.777 17.656 7.343A7.975 7.975 0 0120 13a7.975 7.975 0 01-2.343 5.657z" />
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.879 16.121A3 3 0 1012.015 11L11 14H9c0 .768.293 1.536.879 2.121z" />
                        </svg>
                    </div>

                    <div id="streak" class="text-white font-bold">
                        5
                    </div>
                </div>
            </div>

            <div class="">
                <div style="background:#696868" class="flex items-center rounded-full px-4 py-2">
                    <div class="h-6 w-6 mr-2">
                        <img src="~/images/coin.png" />
                    </div>

                    <div id="gPoints" style="color: yellow" class="font-bold">
                        2000 points
                    </div>
                </div>
            </div>
        </div>
        <div id="box" style="height: 200px" class="w-full cursor-pointer mb-4 border-2 border-solid border-gray-100 shadow rounded-lg">

            <div id="gQuestion" class="relative w-full h-full bg-white flip-card text-2xl font-bold flex justify-center items-center" id="flipCard">
                <!-- Mặt trước -->
                Đâu là thủ đô của Việt Nam ?
            </div>
        </div>

        <div class="w-full h-8 rounded-full mt-8">
            <div id="progress-bar" class="bg-green-500 font-medium h-full text-blue-100 text-right leading-none rounded-full" style="width: 100%; padding-top: 8px; padding-right:10px">20s</div>
        </div>

        <div class="mt-4">
            <div class="flex justify-between items-center">
                <div class="text-white text-lg font-bold">
                    Please choose one of the answers below
                </div>
                <div id="numberSubmitted" style="border: 1px solid gray; background:#696868; width: 100px" class="border-2 mr-2 p-2 text-white text-center border-solid !border-black shadow rounded-lg text-lg bg-black">
                    00 Answers
                </div>
            </div>

            <div>
                <div class="grid grid-cols-2 gap-8 text-white mt-4" id="gAnswers">
                    <div style="background:#ff3131; height: 100px" class="cursor-pointer relative w-full flip-card text-lg flex justify-center items-center border-2 border-solid border-red-500 shadow rounded-lg" id="flipCard">
                        <!-- Mặt trước -->
                        A. Hồ Chí Minh
                    </div>
                    <div style="background:#01e32a; height: 100px" class="cursor-pointer relative w-full h-full flip-card text-lg flex justify-center items-center border-2 border-solid border-green-500 shadow rounded-lg" id="flipCard">
                        <!-- Mặt trước -->
                        B. Hà Nội
                    </div>
                    <div style="background:#5271ff; height: 100px" class="cursor-pointer relative w-full flip-card text-lg flex justify-center items-center border-2 border-solid border-blue-600 shadow rounded-lg" id="flipCard">
                        <!-- Mặt trước -->
                        C. Đà Nẵng
                    </div>
                    <div style="background:#fe7f00; height: 100px" class="cursor-pointer relative w-full h-full flip-card text-lg flex justify-center items-center border-2 border-solid border-yellow-800 shadow rounded-lg" id="flipCard">
                        <!-- Mặt trước -->
                        D. Nha Trang
                    </div>
                </div>

            </div>
        </div>
    </div>
    <!--get result-->
    <div id="waitresult" style="display:none" class="h-full flex flex-col justify-center items-center">
        <div class="text-white text-2xl">
            Please wait for other players to answer
        </div>
        <div class="mt-8">
            <div role="status">
                <svg aria-hidden="true" class="inline w-16 h-16 text-gray-200 animate-spin dark:text-gray-600 fill-purple-600" viewBox="0 0 100 101" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M100 50.5908C100 78.2051 77.6142 100.591 50 100.591C22.3858 100.591 0 78.2051 0 50.5908C0 22.9766 22.3858 0.59082 50 0.59082C77.6142 0.59082 100 22.9766 100 50.5908ZM9.08144 50.5908C9.08144 73.1895 27.4013 91.5094 50 91.5094C72.5987 91.5094 90.9186 73.1895 90.9186 50.5908C90.9186 27.9921 72.5987 9.67226 50 9.67226C27.4013 9.67226 9.08144 27.9921 9.08144 50.5908Z" fill="currentColor" />
                    <path d="M93.9676 39.0409C96.393 38.4038 97.8624 35.9116 97.0079 33.5539C95.2932 28.8227 92.871 24.3692 89.8167 20.348C85.8452 15.1192 80.8826 10.7238 75.2124 7.41289C69.5422 4.10194 63.2754 1.94025 56.7698 1.05124C51.7666 0.367541 46.6976 0.446843 41.7345 1.27873C39.2613 1.69328 37.813 4.19778 38.4501 6.62326C39.0873 9.04874 41.5694 10.4717 44.0505 10.1071C47.8511 9.54855 51.7191 9.52689 55.5402 10.0491C60.8642 10.7766 65.9928 12.5457 70.6331 15.2552C75.2735 17.9648 79.3347 21.5619 82.5849 25.841C84.9175 28.9121 86.7997 32.2913 88.1811 35.8758C89.083 38.2158 91.5421 39.6781 93.9676 39.0409Z" fill="currentFill" />
                </svg>
                <span class="sr-only">Loading...</span>
            </div>
        </div>
    </div>

    <div id="correctresult" style="display:none" class="h-full flex flex-col justify-center items-center">
        <div style="font-size: 3rem" class="text-white font-bold italic">
            Correct
        </div>
        <div class="mt-8 h-16 w-16">
            <img style="filter:brightness(0) invert(1)" src="~/images/correct.png" />
        </div>
        <div class="mt-8 flex items-center">
            <div class="text-white text-xl mr-2 font-bold">
                Answer Streak
            </div>
            <div style="background:#696868" class="flex items-center rounded-full px-4 py-2">
                <div>
                    <svg class="h-8 w-8 text-orange-500 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 18.657A8 8 0 016.343 7.343S7 9 9 10c0-2 .5-5 2.986-7C14 5 16.09 5.777 17.656 7.343A7.975 7.975 0 0120 13a7.975 7.975 0 01-2.343 5.657z" />
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.879 16.121A3 3 0 1012.015 11L11 14H9c0 .768.293 1.536.879 2.121z" />
                    </svg>
                </div>

                <div id="resultStreak" class="text-white font-bold">
                    5
                </div>
            </div>
        </div>

        <div style="background:#696868" class="flex items-center rounded-full px-4 py-4 mt-8">
            <div class="h-6 w-6 mr-2">
                <img src="~/images/coin.png" />
            </div>

            <div id="resultPoint" style="color: yellow" class="font-bold">
                2000 points
            </div>
        </div>

        <div id="resultPlaceC" class="mt-8 text-white text-lg font-bold">
            You're in 1st place
        </div>
    </div>

    <div id="incorrectresult" style="display:none" class="h-full flex flex-col justify-center items-center">
        <div style="font-size: 3rem" class="text-white font-bold italic">
            Incorrect
        </div>
        <div class="mt-8 h-16 w-16">
            <img style="filter:brightness(0) invert(1)" src="~/images/incorrect.png" />
        </div>
        <div class="mt-8 flex items-center">
            <div class="text-white text-xl mr-2 font-bold">
                Answer Streak Lost
            </div>
        </div>

        <div id="resultPlaceI" class="mt-8 text-white text-lg font-bold">
            You're in 1st place
        </div>
    </div>

    <!--get report-->
    <div id="report" style="display:none" class="flex flex-col items-center w-full h-full">
        <div style="background:#696868" class="flex text-white items-center text-xl font-bold justify-center rounded-full px-8 py-4 mt-8">
            Report
        </div>
        <!-- Cột 1 -->
        <div id="gReportResult" class="w-full mt-8 flex justify-center items-end space-x-4 p-8 bg-gray-100 rounded-lg  mx-auto">
            <div class="flex flex-col items-center">
                <span class="mt-2 text-sm font-semibold">50</span>
                <div class="bg-blue-500 w-16 rounded-t-lg animate-height" style="--target-height: 100px; animation-delay: 0.1s;"></div>
                <div class="mt-2 text-sm font-semibold flex items-center">
                    <div class="mr-2">A</div>
                    <div>
                        <img class="h-4 w-4 filter-green" src="~/images/correct.png" />
                    </div>
                </div>
            </div>

            <!-- Cột 2 -->
            <div class="flex flex-col items-center">
                <span class="mt-2 text-sm font-semibold">100</span>
                <div class="bg-red-500 w-16 rounded-t-lg animate-height" style="--target-height: 200px; animation-delay: 0.1s;"></div>
                <div class="mt-2 text-sm font-semibold flex items-center">
                    <div class="mr-2">B</div>
                    <div>
                        <img class="h-4 w-4 filter-red" src="~/images/incorrect.png" />
                    </div>
                </div>
            </div>

            <!-- Cột 3 -->
            <div class="flex flex-col items-center">
                <span class="mt-2 text-sm font-semibold">75</span>
                <div class="bg-green-500 w-16 rounded-t-lg animate-height" style="--target-height: 150px; animation-delay: 0.1s;"></div>
                <div class="mt-2 text-sm font-semibold flex items-center">
                    <div class="mr-2">C</div>
                    <div>
                        <img class="h-4 w-4 filter-red" src="~/images/incorrect.png" />
                    </div>
                </div>
            </div>

            <!-- Cột 4 -->
            <div class="flex flex-col items-center">
                <span class="mt-2 text-sm font-semibold">150</span>
                <div class="bg-yellow-500 w-16 rounded-t-lg animate-height" style="--target-height: 300px; animation-delay: 0.1s;"></div>
                <div class="mt-2 text-sm font-semibold flex items-center">
                    <div class="mr-2">D</div>
                    <div>
                        <img class="h-4 w-4 filter-red" src="~/images/incorrect.png" />
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!--get ranking-->
    <div id="ranking" style="display:none" class="flex flex-col items-center w-full h-full">
        <div style="background:#696868" class="flex text-white items-center text-xl font-bold justify-center rounded-full px-8 py-4 mt-8">
            Scoreboard
        </div>
        <div class="mt-8 text-white">
            <table>
                <thead>
                    <tr>
                        <th style="text-align: left" width="100px">Rank</th>
                        <th style="text-align: left" width="300px">Username</th>
                        <th style="text-align: left" width="200px">Point</th>
                    </tr>
                </thead>
                <tbody id="scoreboardTbody">
                </tbody>
            </table>
        </div>
    </div>

    <!--get final report-->
    <div id="final" style="display:none" class="flex flex-col items-center">
        <div style="width: 700px" class="flex justify-start">
            <button onclick="getAvatars()" style="background: #8854c0" class="text-white focus:ring-4 focus:ring-blue-300 font-medium rounded-lg text-sm p-2 mb-2 dark:bg-blue-600 dark:hover:bg-blue-700 focus:outline-none dark:focus:ring-blue-800" type="button" data-drawer-target="drawer-right-ranking" data-drawer-show="drawer-right-ranking" data-drawer-placement="right" aria-controls="drawer-right-ranking">
                <img src="~/images/podium.png" class="h-8 w-8" />
            </button>
        </div>
        <div style="background:#696868" class="flex w-fit text-white items-center text-xl font-bold justify-center rounded-full px-8 py-4 mt-8">
            Final Report
        </div>
        <div>


            <!-- drawer component -->
            <div id="drawer-right-ranking" style="width: 500px;background:#696868 " class="fixed top-0 right-0 text-white z-40 h-screen p-4 overflow-y-auto transition-transform translate-x-full bg-white w-80 dark:bg-gray-800" tabindex="-1" aria-labelledby="drawer-right-label-ranking">
                <h5 id="drawer-right-label-ranking" class="inline-flex items-center mb-4 text-base font-semibold text-white dark:text-gray-400">
                    <img src="~/images/podium.png" class="h-8 w-8 mr-2" />
                    Leaderboard
                </h5>
                <button type="button" data-drawer-hide="drawer-right-ranking" aria-controls="drawer-right-ranking" class="text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm w-8 h-8 absolute top-2.5 end-2.5 inline-flex items-center justify-center dark:hover:bg-gray-600 dark:hover:text-white">
                    <svg class="w-3 h-3" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 14 14">
                        <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 1 6 6m0 0 6 6M7 7l6-6M7 7l-6 6" />
                    </svg>
                    <span class="sr-only">Close menu</span>
                </button>
                <div class="mb-6">
                    <table>
                        <thead>
                            <tr>
                                <th style="text-align: left" width="100px">Rank</th>
                                <th style="text-align: left" width="400px">Username</th>
                                <th style="text-align: left" width="200px">Point</th>
                            </tr>
                        </thead>
                        <tbody id="finalRankingTbody">
                            <tr>
                                <td width="100px">1</td>
                                <td width="400px">
                                    <div class="flex items-center flex-row text-center animate-pulse">
                                        <div class="relative mr-2 w-10 h-10 overflow-hidden bg-gray-100 rounded-full dark:bg-gray-600">
                                            <img class="h-12 w-12 rounded-full" src="~/images/avatar1.jpg" />

                                        </div>
                                        <div class="text-lg text-left mr-4">
                                            Bang
                                        </div>
                                        <div class="mt-2">
                                            <img src="~/images/first.png" class="h-8 w-8" />
                                        </div>
                                    </div>
                                </td>
                                <td width="200px">
                                    <div class="flex items-center justify-start rounded-full">
                                        <div class="h-6 w-6 mr-2">
                                            <img src="/images/coin.png" />
                                        </div>
                                        <div style="color: yellow" class="font-bold" id="points-${index}">
                                            2000 points
                                        </div>
                                    </div>
                                </td>
                            </tr>
                            <tr>
                                <td width="50px">1</td>
                                <td width="300px">
                                    <div class="flex items-center flex-row text-center animate-pulse">
                                        <div class="relative mr-2 w-10 h-10 overflow-hidden bg-gray-100 rounded-full dark:bg-gray-600">
                                            <img class="h-12 w-12 rounded-full" src="~/images/avatar1.jpg" />

                                        </div>
                                        <div class="text-lg mr-4 text-left">Bang</div>
                                        <div class="mt-2">
                                            <img src="~/images/second.png" class="h-8 w-8" />
                                        </div>
                                    </div>
                                </td>
                                <td width="200px">
                                    <div class="flex items-center justify-start rounded-full">
                                        <div class="h-6 w-6 mr-2">
                                            <img src="/images/coin.png" />
                                        </div>
                                        <div style="color: yellow" class="font-bold" id="points-${index}">
                                            2000 points
                                        </div>
                                    </div>
                                </td>
                            </tr>
                        </tbody>
                    </table>

                </div>
            </div>
        </div>
        <div class="flex justify-center mt-8">
            <div style="background:#696868" class="flex flex-row justify-center items-center py-4 px-8 rounded-lg ">
                <div style="background:white" class="flex flex-col justify-center items-center p-2 rounded-full h-24 w-24 mr-8">
                    <img id="finalPlayerAvatar" src="~/images/avatar1.jpg" class="w-full h-full rounded-full" />
                </div>
                <div class="flex flex-col">
                    <div id="gUsername" class="text-white text-lg font-bold">
                        Mast
                    </div>

                    <div class="mt-4 flex">
                        <div class="h-6 w-6 mr-2">
                            <img src="~/images/coin.png" />
                        </div>

                        <div id="finalResultPoint" style="color: yellow" class="font-bold">
                            2000 points
                        </div>
                    </div>
                </div>
            </div>


        </div>
        <div style="width: 700px">
            <div class="mt-4 text-white text-xl">
                Correct Answer
            </div>
            <div style="background:#696868" class="w-full h-8 rounded-full mt-4">
                <div id="correctBar" class="bg-green-500 font-medium h-full text-blue-100 text-right leading-none rounded-full" style="width: 50%; padding-top: 8px; padding-right:10px">50%</div>
            </div>
            <div style="background:#696868" class="mt-4 text-white text-xl flex justify-between rounded-lg px-8 py-4">
                <div class="flex flex-col items-center justify-center">
                    <div>
                        Place
                    </div>
                    <div id="finalPlace" class="font-bold">
                        1 / 2
                    </div>
                </div>

                <div>
                    <svg class="h-16 w-16 text-yellow-300" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">  <path stroke="none" d="M0 0h24v24H0z" />  <line x1="8" y1="21" x2="16" y2="21" />  <line x1="12" y1="17" x2="12" y2="21" />  <line x1="7" y1="4" x2="17" y2="4" />  <path d="M17 4v8a5 5 0 0 1 -10 0v-8" />  <circle cx="5" cy="9" r="2" />  <circle cx="19" cy="9" r="2" /></svg>
                </div>
            </div>
            <div class="mt-4 text-white text-xl">
                Performance
            </div>
            <div class="mt-4 grid grid-cols-2 gap-8 text-white">
                <div style="background:#696868" class="flex justify-center rounded-lg items-center p-8">
                    <div class="mr-4">
                        <img class="filter-green h-12 w-12" src="~/images/correct.png" />
                    </div>
                    <div id="finalCorrect" class="text-xl">
                        19
                    </div>
                </div>

                <div style="background:#696868" class="flex justify-center rounded-lg items-center p-8 rounded-lg">
                    <div class="mr-4">
                        <img class="filter-red h-12 w-12" src="~/images/incorrect.png" />
                    </div>
                    <div id="finalIncorrect" class="text-xl">
                        19
                    </div>
                </div>

                <div style="background:#696868" class="flex justify-center rounded-lg items-center p-8 rounded-lg">
                    <div class="mr-4">
                        <img class="h-12 w-12" src="~/images/hourglass.png" />
                    </div>
                    <div id="finalDuration" class="text-xl">
                        19s
                    </div>
                </div>

                <div style="background:#696868" class="flex justify-center rounded-lg items-center p-8">
                    <div class="mr-4">
                        <img class="h-12 w-12" src="~/images/fire.png" />
                    </div>
                    <div id="finalStreak" class="text-xl">
                        19
                    </div>
                </div>
            </div>
            <div class="mt-4 text-white text-xl">
                Detail
            </div>
            <div id="detailReport" class="mt-4">
                <div class="flex flex-col bg-white mb-4 border-2 border-solid border-gray-100 shadow rounded-lg p-4">
                    <div class="flex flex-col mr-2" style="width: 100%">
                        <div class="mb-2">
                            Dau la thu do cua Viet Nam ?
                        </div>
                        <div class="flex flex-col">
                            <div>
                                <strong>A.&nbsp;</strong>
                                <span>Ho Chi Minh</span>
                            </div>
                            <div>
                                <strong>B.&nbsp;</strong>
                                <span>Ha Noi</span>
                            </div>
                            <div>
                                <strong>C.&nbsp;</strong>
                                <span>Da Nang</span>
                            </div>
                            <div>
                                <strong>D.&nbsp;</strong>
                                <span>Nha Trang</span>
                            </div>
                        </div>
                    </div>

                </div>
            </div>
        </div>
    </div>
</div>

<div id="toast-success-create" class="flex hidden animate-[fade-out_2s_ease-out_5s_1_forwards] opacity-1 flex-col fixed z-50 top-5 right-5 items-center w-full max-w-xs p-4 mb-4 text-gray-500 bg-white rounded-lg shadow dark:text-gray-400 dark:bg-gray-800" role="alert">
    <div class="flex flex-row items-center justify-between w-full">
        <div class="flex flex-row items-center">
            <div class="inline-flex items-center justify-center flex-shrink-0 w-8 h-8 text-green-500 bg-green-100 rounded-lg dark:bg-green-800 dark:text-green-200">
                <svg class="w-5 h-5" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 20">
                    <path d="M10 .5a9.5 9.5 0 1 0 9.5 9.5A9.51 9.51 0 0 0 10 .5Zm3.707 8.207-4 4a1 1 0 0 1-1.414 0l-2-2a1 1 0 0 1 1.414-1.414L9 10.586l3.293-3.293a1 1 0 0 1 1.414 1.414Z" />
                </svg>
                <span class="sr-only">Check icon</span>
            </div>
            <div class="ms-3 text-sm font-normal">Update successfully</div>
        </div>
        <div>
            <button type="button" class="ms-auto -mx-1.5 -my-1.5 bg-white text-gray-400 hover:text-gray-900 rounded-lg focus:ring-2 focus:ring-gray-300 p-1.5 hover:bg-gray-100 inline-flex items-center justify-center h-8 w-8 dark:text-gray-500 dark:hover:text-white dark:bg-gray-800 dark:hover:bg-gray-700" data-dismiss-target="#toast-success" aria-label="Close">
                <span class="sr-only">Close</span>
                <svg class="w-3 h-3" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 14 14">
                    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 1 6 6m0 0 6 6M7 7l6-6M7 7l-6 6" />
                </svg>
            </button>
        </div>
    </div>
    <div class="flex flex-row items-center justify-between w-full">
        <div class="w-full bg-gray-200 rounded-full h-1.5 mb-1 mt-2 dark:bg-gray-700">
            <div id="animateDiv-create" class="bg-green-400 h-1.5 rounded-full dark:bg-green-300 animate-[reduce_7s_ease-in-out_0s_1_forwards]" style="width: 100%"></div>
        </div>
    </div>
</div>

<div id="toast-danger-create" class="flex hidden animate-[fade-out_2s_ease-out_5s_1_forwards] opacity-1 flex-col fixed z-50 top-5 right-5 items-center w-full max-w-xs p-4 mb-4 text-gray-500 bg-white rounded-lg shadow dark:text-gray-400 dark:bg-gray-800" role="alert">
    <div class="flex flex-row items-center justify-between w-full">
        <div class="flex flex-row items-center">
            <div class="inline-flex items-center justify-center flex-shrink-0 w-8 h-8 text-red-500 bg-red-100 rounded-lg dark:bg-red-800 dark:text-red-200">
                <svg class="w-5 h-5" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 20">
                    <path d="M10 .5a9.5 9.5 0 1 0 9.5 9.5A9.51 9.51 0 0 0 10 .5Zm3.707 11.793a1 1 0 1 1-1.414 1.414L10 11.414l-2.293 2.293a1 1 0 0 1-1.414-1.414L8.586 10 6.293 7.707a1 1 0 0 1 1.414-1.414L10 8.586l2.293-2.293a1 1 0 0 1 1.414 1.414L11.414 10l2.293 2.293Z" />
                </svg>
                <span class="sr-only">Error icon</span>
            </div>
            <div class="ms-3 text-sm font-normal">Update error</div>
        </div>
        <div>
            <button type="button" class="ms-auto -mx-1.5 -my-1.5 bg-white text-gray-400 hover:text-gray-900 rounded-lg focus:ring-2 focus:ring-gray-300 p-1.5 hover:bg-gray-100 inline-flex items-center justify-center h-8 w-8 dark:text-gray-500 dark:hover:text-white dark:bg-gray-800 dark:hover:bg-gray-700" data-dismiss-target="#toast-success" aria-label="Close">
                <span class="sr-only">Close</span>
                <svg class="w-3 h-3" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 14 14">
                    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 1 6 6m0 0 6 6M7 7l6-6M7 7l-6 6" />
                </svg>
            </button>
        </div>
    </div>
    <div class="flex flex-row items-center justify-between w-full">
        <div class="w-full bg-gray-200 rounded-full h-1.5 mb-1 mt-2 dark:bg-gray-700">
            <div id="animateDiv-danger" class="bg-red-400 h-1.5 rounded-full dark:bg-green-300 animate-[reduce_7s_ease-in-out_0s_1_forwards]" style="width: 100%"></div>
        </div>
    </div>
</div>
<script src="~/js/site.js" asp-append-version="true"></script>

<script>
    window.onload = function () {
        getAvatars();

    }
    var audio = new Audio();
    audio.src = "/music/bg_sound.mp3";
    audio.preload = 'auto';



    async function changeAvatar(avatar) {
        const apiUrl = "https://localhost:7024/api/Gameplay/update-avatar?code=" + document.getElementById("code").innerHTML + "&username=" + getCookie("kazilet_gameplay_username") + "&avatar=" + avatar;
        try {
            const response = await fetch(apiUrl, {
                method: 'POST',
                headers: {
                    "content-type": "application/json"
                },
                body: ""
            })

            if (response.ok) {
                document.getElementById("playerLobbyAvatar").src = avatar;
                showToastSuccess();
            }
        } catch (error) {
            console.log(error);
        }
    }

    var audioCoinIncrease = new Audio();
    audioCoinIncrease.src = "/music/coin_spill.mp3";
    audioCoinIncrease.preload = 'auto';

    async function saveSetting() {
        const obj = {
            Code: document.getElementById("code").innerHTML,
            NoQuestion: document.getElementById("noq").value,
            TimeLimit: document.getElementById("time").value
        }
        const apiUrl = "https://localhost:7024/api/Gameplay/update-setting";
        try {
            const response = await fetch(apiUrl, {
                method: 'PATCH',
                headers: {
                    "content-type": "application/json"
                },
                body: JSON.stringify(obj)
            })
            if (response.ok) {
                await changeAvatar(document.getElementById("playerAvatar").src);
            }
        } catch (error) {
            console.log(error);
        }
    }


    async function getAvatars() {
        const apiUrl = "https://localhost:7024/api/Gameplay/get-avatars?code=" + document.getElementById("code").innerHTML + "&username=" + getCookie("kazilet_gameplay_username");
        try {
            const response = await fetch(apiUrl, {
                method: 'GET'
            })
            if (response.ok) {
                const data = await response.json();
                document.getElementById("playerAvatar").src = data.playerAvatar;
                for (var i = 1; i <= 15; i++) {
                    var flag = false;
                    for (var j = 0; j < data.avatarInLobby.length; j++) {
                        var avatar = data.avatarInLobby[j].replace("/images/avatar", "");
                        avatar = avatar.replace(".jpg", "");
                        if (Number(avatar) == i) {
                            flag = true;
                        }
                    }
                    if (flag) {
                        document.getElementById("avatar" + i).style.opacity = "30%";
                        if (document.getElementById("avatar" + i).classList.contains("cursor-pointer")) {
                            document.getElementById("avatar" + i).classList.remove("cursor-pointer")
                        }
                        document.getElementById("avatar" + i).onclick = null;
                    }
                    else {
                        document.getElementById("avatar" + i).style.opacity = "100%";
                        if (!document.getElementById("avatar" + i).classList.contains("cursor-pointer")) {
                            document.getElementById("avatar" + i).classList.add("cursor-pointer")
                        }
                        console.log(i);
                        document.getElementById("avatar" + i).onclick = (function (i) {
                            return function () {
                                document.getElementById("playerAvatar").src = "/images/avatar" + i + ".jpg";
                            };
                        })(i);
                    }
                }
            }
        } catch (error) {
            console.log(error);
        }
    }
</script>

<script>
    let oldArr = [{
        username: 'Bang',
        point: 2500
    }, {
        username: 'Nam',
        point: 2000
    }, {
        username: 'Binh',
        point: 1800
    }];

    let newArr = [{
        username: 'Bang',
        point: 2500
    }, {
        username: 'Nam',
        point: 2700
    }, {
        username: 'Binh',
        point: 2600
    }];

    // Hàm để render bảng với dữ liệu
    function renderTable(data) {
        const tbody = document.getElementById("scoreboardTbody");
        tbody.innerHTML = "";  // Clear bảng trước khi chèn mới

        data.forEach((item, index) => {
            let html = `<tr class="py-8">
                                                                                                            <td width="50px">${index + 1}</td>
                                                                                                            <td width="300px">
                                                                                                                <div class="flex items-center flex-row text-center animate-pulse">
                                                                                                                    <div class="relative mr-2 w-10 h-10 overflow-hidden bg-gray-100 rounded-full dark:bg-gray-600">
                                                                                                                                        <img class="h-12 w-12 rounded-full" src=${item.avatar} />

                                                                                                                    </div>
                                                                                                                    <div class="text-lg mt-2">${item.username}</div>
                                                                                                                </div>
                                                                                                            </td>
                                                                                                            <td width="200px">
                                                                                                                <div class="flex items-center justify-start rounded-full">
                                                                                                                    <div class="h-6 w-6 mr-2">
                                                                                                                        <img src="/images/coin.png" />
                                                                                                                    </div>
                                                                                                                    <div style="color: yellow" class="font-bold" id="points-${index}">
                                                                                                                        ${item.point} points
                                                                                                                    </div>
                                                                                                                </div>
                                                                                                            </td>
                                                                                                        </tr>`;
            tbody.innerHTML += html;
        });
    }

    function animatePoints() {
        const rows = document.querySelectorAll("#scoreboardTbody tr");
        rows.forEach((row, index) => {
            const pointElement = document.getElementById(`points-${index}`);
            const initialPoint = oldArr[index].point;  // Lấy điểm ban đầu
            const targetPoint = newArr[index].point;  // Lấy điểm mới

            let currentPoint = initialPoint;
            let step = (targetPoint - initialPoint) / 50;  // Chia điểm thành 50 bước

            // Tăng điểm dần dần
            let interval = setInterval(() => {
                currentPoint += step;
                if (Math.abs(currentPoint - targetPoint) < Math.abs(step)) {
                    currentPoint = targetPoint;  // Đảm bảo điểm không vượt quá giá trị cuối cùng
                    clearInterval(interval);  // Dừng hiệu ứng khi đã đạt được điểm mới
                }

                pointElement.innerText = `${Math.round(currentPoint)} points`;  // Cập nhật điểm
            }, 15);  // Mỗi lần thay đổi điểm cách nhau 100ms
        });
    }

    // Hàm để sắp xếp và thêm animation
    function updateTableWithAnimation() {
        // Bắt đầu tăng điểm dần dần
        animatePoints();

        // Sau khi animation kết thúc, sắp xếp bảng và thêm hiệu ứng di chuyển
        setTimeout(() => {
            // Sắp xếp mảng newArr theo điểm từ cao đến thấp
            newArr.sort((a, b) => b.point - a.point);

            // Render lại bảng với dữ liệu mới
            renderTable(newArr);

            // Thêm animation: tăng chiều cao từng row từ 0
            const rows = document.querySelectorAll("#scoreboardTbody tr");
            rows.forEach((row, index) => {
                row.style.opacity = 0;
                row.style.transform = "translateY(20px)";
                row.style.transition = "all 0.5s ease-out";

                setTimeout(() => {
                    row.style.opacity = 1;
                    row.style.transform = "translateY(0)";
                }, index * 100);  // Tạo hiệu ứng dần dần cho từng hàng
            });
        }, 1250);  // Đợi 2.5 giây (thời gian hoàn thành hiệu ứng tăng điểm)
    }

    // Gọi hàm để render bảng ban đầu


    document.getElementById("header").style.display = "none";
    window.onload = function () {
        connect(document.getElementById("token").innerHTML);
        document.cookie = `kazilet-signalr=${document.getElementById("token").innerHTML}`;
    }

    var countdownValue = 20;
    var totalTime = 20;
    const progressBar = document.getElementById('progress-bar');

    function updateCountdown() {
        if (countdownValue > 0) {
            // Cập nhật giá trị đếm ngược và hiển thị trên progress bar
            countdownValue--;
            if (countdownValue == 10) {
                progressBar.classList.remove("bg-green-500");
                progressBar.classList.add("bg-red-600");
            }
            progressBar.innerHTML = countdownValue + 's';

            // Tính toán chiều rộng của progress bar dựa trên thời gian còn lại
            var widthPercentage = (countdownValue / totalTime) * 100;
            progressBar.style.width = widthPercentage + '%';
        } else {
            // Dừng khi đếm ngược về 0
            clearInterval(countdownInterval);
            progressBar.innerHTML = "0s";
            progressBar.style.width = '0%';
            sendAnswer(0);
        }
    }

    // Thiết lập hàm đếm ngược mỗi giây

    async function start() {
        try {
            console.log(document.getElementById("code").innerHTML + " " + document.getElementById("usernameInputText").innerHTML);
            const res = await fetch("https://localhost:7024/api/Gameplay/start?code=" + document.getElementById("code").innerHTML + "&username=" + document.getElementById("usernameInputText").innerHTML, {
                method: 'post',
                headers: {
                    "content-type": "application/json"
                },
                body: ""
            });

        } catch (error) {
            console.log(error);
        }
    }

    let count = 4;
    let isStart = true;
    let isRunning = false;
    let key = 0;
    let timer;
    var countdownInterval;
    const countDisplay = document.getElementById('countDisplay');
    const restartButton = document.getElementById('restartButton');

    function startCountdown() {
        if (isRunning || count <= 0) return;
        isRunning = true;

        timer = setInterval(() => {
            if (isStart == true) {
                if (count > 0) {
                    count--;
                    count == 4 ? countDisplay.textContent = 'Are you ready?' : countDisplay.textContent = count
                    countDisplay.textContent = count === 0 ? 'Go!' : count;
                    countDisplay.classList.remove('animate-pop');
                    void countDisplay.offsetWidth; // Trigger reflow to restart animation
                    countDisplay.classList.add('animate-pop');
                } else {
                    clearInterval(timer);
                    isRunning = false;
                    countdownInterval = setInterval(updateCountdown, 1000);

                    document.getElementById("countdown").style.display = "none";
                    document.getElementById("question").style.display = "block";
                }
            }
            else {
                if (count > 1) {
                    count--;
                    countDisplay.textContent = count;
                    countDisplay.classList.remove('animate-pop');
                    void countDisplay.offsetWidth; // Trigger reflow to restart animation
                    countDisplay.classList.add('animate-pop');
                } else {
                    clearInterval(timer);
                    isRunning = false;
                    countdownInterval = setInterval(updateCountdown, 1000);

                    document.getElementById("countdown").style.display = "none";
                    document.getElementById("question").style.display = "block";
                }
            }


        }, 1000);
    }

    // Function to reset the count
    function resetCount() {
        clearInterval(timer);
        count = 3;
        isRunning = false;
        countDisplay.textContent = count;
        countDisplay.classList.remove('animate-pop');
        void countDisplay.offsetWidth; // Trigger reflow to restart animation
        countDisplay.classList.add('animate-pop');
        startCountdown();
    }

</script>

<script>
    function showToastSuccess() {
        var toast = document.getElementById("toast-success-create");
        toast.classList.remove("hidden");
        toast.classList.remove("animate-[fade-out_2s_ease-out_5s_1_forwards]");

        // Đặt độ rộng về 100%
        var animateDiv = document.getElementById('animateDiv-create');
        animateDiv.classList.remove("animate-[reduce_7s_ease-in-out_0s_1_forwards]");

        // Gây ra sự tái tính toán kích thước
        void toast.offsetWidth;

        // Thêm lớp animation fade-out
        toast.classList.add("animate-[fade-out_2s_ease-out_5s_1_forwards]");
        animateDiv.classList.add("animate-[reduce_7s_ease-in-out_0s_1_forwards]");

        // Thêm lớp để giảm độ rộng
        animateDiv.classList.add("reduceWidth");

        // Reset độ rộng sau khi animation hoàn tất
        setTimeout(function () {
            animateDiv.style.width = '100%'; // Đặt lại độ rộng về 100%
        }, 2000);
    }

    document.addEventListener('DOMContentLoaded', (event) => {
        var toast = document.getElementById("toast-success-create");
        if (toast.classList.contains("block")) {
            document.getElementById('animateDiv-create').classList.add("reduceWidth");
            document.getElementById('animateDiv-create').style.width = '0%';


        }
        function onTransitionEnd(event) {
            if (event.propertyName === 'width' && animateDiv.style.width === '0%') {
                document.getElementById('animateDiv-create').classList.remove("reduceWidth");
                //    document.getElementById('animateDiv').style.width = '100%';
                //  console.log(document.getElementById('animateDiv').style.width);
                //   toast.classList.add("animate-[fade-out_1s_ease-out_0.25s_1]");

            }
        }



        document.getElementById('animateDiv-create').addEventListener('transitionend', onTransitionEnd);
    });
</script>
<script>
    function setCookie(name, value, seconds) {
        const date = new Date();
        date.setTime(date.getTime() + (seconds * 1000));
        const expires = `expires=${date.toUTCString()}`;
        document.cookie = `${name}=${value}; ${expires}; path=/`;
    }

    function getCookieV2(key) {
        const value = document.cookie;

        const cookies = value.split('; ').reduce((acc, cookie) => {
            const [k, v] = cookie.split('=');
            acc[k] = decodeURIComponent(v);
            return acc;
        }, {});

        return cookies[key];
    }

    function deleteCookie(name) {
        document.cookie = `${name}=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;`;
    }
    function logout() {
        deleteCookie("accessToken");
        handleAuthUI();
    }

    // Function to check if the access token is valid
    async function isAccessTokenValid() {
        const token = getCookieV2('accessToken');
        if (!token) return false;

        try {
            const response = await fetch('https://localhost:7024/api/Authentication/check', {
                method: 'GET',
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json',
                }
            });

            if (!response.ok) throw new Error('Error validating token');

            const data = await response.json();

            const usernameDisplay = document.getElementById('usernameShow');
            const username = data.username;
            usernameDisplay.innerHTML = 'Hello, ' + username;
            return true;
        } catch (error) {
            console.error('Error making request:', error);
            return false;
        }
    }

    // Function to handle the authentication UI
    async function handleAuthUI() {
        const loginButton = document.querySelector('.login-btn');
        const registerButton = document.querySelector('.register-btn');
        const usernameDisplay = document.querySelector('.username');

        const isValid = await isAccessTokenValid();

        if (isValid) {
            loginButton.style.display = 'none';
            registerButton.style.display = 'none';
            usernameDisplay.style.display = 'inline-block';
        } else {
            deleteCookie("accessToken");
            loginButton.style.display = 'inline-block';
            registerButton.style.display = 'inline-block';
            usernameDisplay.style.display = 'none';
        }
    }

   

    // Debounced resize event listener to optimize performance
    let resizeTimeout;
   

    // Function to toggle sidebar state
    function toggleSidebarState() {
        isSidebarOpen = !isSidebarOpen;
        updateSidebar();
    }

    // Event listener for DOMContentLoaded to initialize UI
    document.addEventListener('DOMContentLoaded', () => {
        handleAuthUI();

        const userMenu = document.getElementById('username');
        const userMenuButton = document.getElementById('usernameShow');
        const userDropdown = document.getElementById('userDropdown');
        const changePasswordDialog = document.getElementById('changePasswordDialog');
        const changePasswordBtn = document.getElementById('changePasswordBtn');
        const changeErrorMessage = document.getElementById('changeErrorMessage');

        const oldPwd = document.getElementById('oldPwd');
        const newPwd = document.getElementById('newPwd');
        const cfPwd = document.getElementById('cfPwd');

        //User dropdown
        userMenuButton.addEventListener('click', function () {
            userDropdown.classList.toggle('hidden');
        });

        document.addEventListener('click', function (event) {
            if (!userMenu.contains(event.target)) {
                userDropdown.classList.add('hidden');
            }
        });

        //Change password handle
        oldPwd.addEventListener('input', () => {
            changePasswordBtn.disabled = (!oldPwd.value || !newPwd.value || !cfPwd.value);
        });

        newPwd.addEventListener('input', () => {
            changePasswordBtn.disabled = (!oldPwd.value || !newPwd.value || !cfPwd.value);
        });

        cfPwd.addEventListener('input', () => {
            changePasswordBtn.disabled = (!oldPwd.value || !newPwd.value || !cfPwd.value);
        });

        window.showChangePasswordDialog = function () {
            changePasswordDialog.classList.remove('hidden');
        };

        changePasswordBtn.addEventListener('click', async function () {
            const oldPassword = oldPwd.value;
            const newPassword = newPwd.value;
            const confirmPassword = cfPwd.value;

            if (newPassword !== confirmPassword) {
                changeErrorMessage.textContent = 'New password and confirm password do not match.';
                changeErrorMessage.classList.remove('hidden');
                return;
            }

            const apiUrl = 'https://localhost:7024/api/Authentication/change';

            try {
                const token = getCookieV2('accessToken');
                if (!token) {
                    deleteCookie("accessToken");
                    handleAuthUI();
                }
                const response = await fetch(apiUrl, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${token}`
                    },
                    body: JSON.stringify(newPassword)
                });

                if (!response.ok) {
                    changeErrorMessage.textContent = response.text;
                    changeErrorMessage.classList.remove('hidden');
                } else {
                    changeErrorMessage.textContent = '';
                    changeErrorMessage.classList.add('hidden');
                    changePasswordDialog.classList.add('hidden');
                    alert("Change password successfully");
                    deleteCookie("accessToken");
                    window.location.href = '/authen/login';
                }
            } catch (error) {
                changeErrorMessage.textContent = error;
                changeErrorMessage.classList.remove('hidden');
            }
        });

        changePasswordDialog.addEventListener('click', function (event) {
            if (event.target === changePasswordDialog) {
                changePasswordDialog.classList.add('hidden');
            }
        });

        //Search input handle
        const input = document.getElementById("searchInput");
        input.addEventListener("keydown", function (event) {
            if (event.key === "Enter") {
                event.preventDefault();
                if (input.value != '') {
                    window.location.href = '/courses?search=' + input.value;
                }
            }
        });

        // Sidebar toggle event listeners
        const sidebar = document.getElementById('sidebar');
        const toggleSidebar = document.getElementById('toggleSidebar');
        const collapseSidebar = document.getElementById('collapseSidebar');
        const mobileMenuToggle = document.getElementById('mobileMenuToggle');
        const menuText = document.getElementById('menuText');
        const menuItemTexts = document.querySelectorAll('.menuItemText');
        const mainContent = document.querySelector('.ml-0.md\\:ml-64');

        let isSidebarCollapsed = false;
        let isSidebarOpen = window.innerWidth > 768;

    
    });

</script>
