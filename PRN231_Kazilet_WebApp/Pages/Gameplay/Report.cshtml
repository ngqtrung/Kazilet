@page
@model PRN231_Kazilet_WebApp.Pages.Gameplay.ReportModel
@{
}
<div id="changePasswordDialog" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center hidden">
    <div class="bg-gray-800 p-8 rounded-lg shadow-xl w-full max-w-md">
        <h3 class="text-2xl font-bold text-white mb-4">Change password</h3>
        <form class="mt-3" id="changePasswordForm">
            <div class="mb-4">
                <label for="oldPwd" class="block text-sm font-medium text-gray-300 mb-2">Old Password</label>
                <input type="password" id="oldPwd" name="oldPwd" required
                       class="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-secondary">
                <label for="newPwd" class="block text-sm font-medium text-gray-300 mb-2">New Password</label>
                <input type="password" id="newPwd" name="newPwd" required
                       class="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-secondary">
                <label for="cfPwd" class="block text-sm font-medium text-gray-300 mb-2">Confirm Password</label>
                <input type="password" id="cfPwd" name="cfPwd" required
                       class="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-secondary">
            </div>
            <div id="changeErrorMessage" class="mb-4 text-red-500 text-sm hidden"></div>
            <button type="button" id="changePasswordBtn" disabled
                    class="w-full bg-secondary text-white py-2 px-4 rounded-md hover:bg-secondary-dark transition duration-300 disabled:opacity-50 disabled:cursor-not-allowed">
                Change Password
            </button>
        </form>
    </div>
</div>
<header class="border-b border-gray-200 sticky top-0 bg-white z-10">
    <div class="container mx-auto px-4 py-4 flex items-center">
        <button id="mobileMenuToggle" class="mr-2 md:hidden text-primary hover:text-secondary focus:outline-none">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
            </svg>
        </button>
        <div class="flex-shrink-0 mr-2">
            <a href="/" class="text-primary text-2xl font-bold">Kazilet</a>
        </div>
        <div class="relative flex-1">
            <svg class="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <circle cx="11" cy="11" r="8"></circle>
                <line x1="21" y1="21" x2="16.65" y2="16.65"></line>
            </svg>
            <input type="text" id="searchInput" placeholder="Search course..." class="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-secondary focus:border-transparent">
        </div>
        <div class="flex items-center ml-2">
            <button onclick="window.location.href='/gameplay/join'" class="text-gray-700 bg-gray-100 hover:text-gray-900 hover:bg-gray-200 px-3 py-2 rounded-md text-sm font-medium">
                Join game
            </button>
            <button onclick="window.location.href='/authen/login'" class="login-btn text-secondary hover:text-primary px-3 py-2 rounded-md text-sm font-medium">
                Login
            </button>
            <button onclick="window.location.href='/authen/register'" class="register-btn bg-secondary hover:bg-primary text-white px-4 py-2 rounded-md text-sm font-medium transition duration-150 ease-in-out">
                Register
            </button>
            @* <span class="username text-secondary hover:text-primary px-3 py-2 rounded-md text-sm font-semibold" style="display: none;"></span> *@
            <div class="relative username" id="username" style="display: none;">
                <button id="usernameShow" class="text-secondary hover:text-primary px-3 py-2 rounded-md text-sm font-semibold"></button>
                <div id="userDropdown" class="absolute right-0 mt-2 w-48 bg-white rounded-md shadow-lg hidden">
                    <a href="#" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100" onclick="showChangePasswordDialog()">Change Password</a>
                    <a href="#" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100" onclick="logout()">Logout</a>
                </div>
            </div>
            @* <button onclick="logout()" class="logout-btn bg-secondary hover:bg-primary text-white px-4 py-2 rounded-md text-sm font-medium transition duration-150 ease-in-out" style="display: none;">
            Logout
            </button> *@
        </div>
    </div>
</header>
<div class="flex flex-col items-center">
    <div style="width: 750px" class="bg-white px-8 py-4">
        <div class="mt-6 flex items-center">
            <div class="mr-2">
                <svg class="h-8 w-8 text-black" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 17v-2m3 2v-4m3 4v-6m2 10H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                </svg>
            </div>
            <div class="text-2xl font-bold">
                Gameplay Report
            </div>


        </div>
        <div id="overall" class="mt-6 flex flex-col w-full">
            <div class="text-xl font-semibold">Summary</div>
            <div class="flex items-center">
                <div class="py-6 flex justify-start" style="width: 60%" id="pie-chart"></div>
                <div class="ml-2 flex flex-col" style="width: 40%">
                    <div class="flex justify-between items-center">
                        <div>Players</div>
                        <div class="flex items-center">
                            <div class="mr-2">
                                <svg class="h-8 w-8 text-black" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                                </svg>
                            </div>
                            <div id="noPlayers" class="font-bold">
                                16
                            </div>
                        </div>
                    </div>
                    <div class="flex justify-between items-center mt-8">
                        <div>Questions</div>
                        <div class="flex items-center">
                            <div class="mr-2">
                                <svg class="h-8 w-8 text-black" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8.228 9c.549-1.165 2.03-2 3.772-2 2.21 0 4 1.343 4 3 0 1.4-1.278 2.575-3.006 2.907-.542.104-.994.54-.994 1.093m0 3h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                                </svg>

                            </div>
                            <div id="noQuestions" class="font-bold">
                                16
                            </div>
                        </div>
                    </div>
                </div>
            </div>

        </div>

        <div>
            <div class="text-sm font-medium text-center text-gray-500 border-b border-gray-200 dark:text-gray-400 dark:border-gray-700">
                <ul class="flex flex-wrap -mb-px">
                    <li class="me-2">
                        <span id="overview" onclick="switchTab('overview')" style="border-color: #8854c0; color: #8854c0" class="cursor-pointer inline-block p-4 border-b-2 border-transparent rounded-t-lg hover:text-gray-600 hover:border-gray-300 dark:hover:text-gray-300">Overview</span>
                    </li>
                    <li class="me-2">
                        <span id="questions" onclick="switchTab('questions')" class="cursor-pointer inline-block p-4 border-b-2 rounded-t-lg active dark:text-blue-500 dark:border-blue-500" aria-current="page">Questions</span>
                    </li>

                </ul>
            </div>
        </div>

        <div id="overviewpart" class="w-full">


            <div class="relative mt-4 mb-4 w-full overflow-x-auto shadow-md sm:rounded-lg">
                <table class="w-full text-sm text-left rtl:text-right text-gray-500 dark:text-gray-400 shadow">
                    <thead class="text-xs text-gray-700 uppercase dark:text-gray-400">
                        <tr>
                            <th scope="col" width="100px" class="px-6 py-3 bg-gray-50 dark:bg-gray-800">
                                Rank
                            </th>
                            <th scope="col" class="px-6 py-3">
                                Username
                            </th>
                            <th scope="col" class="px-6 py-3 bg-gray-50 dark:bg-gray-800">
                                Duration
                            </th>
                            <th scope="col" class="px-6 py-3">
                                Score
                            </th>
                        </tr>
                    </thead>
                    <tbody id="overviewTbody">
                    </tbody>
                </table>
            </div>

        </div>

        <div id="questionpart" class="w-full" style="display: none">
            <div class="relative mt-4 mb-4 w-full overflow-x-auto shadow-md sm:rounded-lg">
                <button id="openModal" style="display: none" data-modal-target="default-modal" data-modal-toggle="default-modal">
                    A
                </button>
                <!-- Main modal -->
                <div id="default-modal" tabindex="-1" aria-hidden="true" class="hidden overflow-y-auto overflow-x-hidden fixed top-0 right-0 left-0 z-50 justify-center items-center w-full md:inset-0 h-[calc(100%-1rem)] max-h-full">
                    <div class="relative p-4 w-full max-w-2xl max-h-full">
                        <!-- Modal content -->
                        <div class="relative bg-white rounded-lg shadow dark:bg-gray-700">
                            <!-- Modal header -->
                            <div class="flex items-center justify-between p-4 md:p-5 border-b rounded-t dark:border-gray-600">
                                <h3 id="modalHeader" class="text-xl font-semibold text-gray-900 dark:text-white">
                                    Question 1
                                </h3>

                                <div class="flex justify-end">
                                    <div style="padding-top: 4px">
                                        <svg id="prev" onclick="newQuestion('minus')" class="cursor-pointer h-6 w-6 text-black" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">  <path stroke="none" d="M0 0h24v24H0z" />  <polyline points="15 6 9 12 15 18" /></svg>
                                    </div>
                                    <div style="padding-top: 4px">
                                        <svg id="next" onclick="newQuestion('plus')" class="cursor-pointer h-6 w-6 text-black" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">  <polyline points="9 18 15 12 9 6" /></svg>
                                    </div>
                                    <button type="button" class="text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm w-8 h-8 ms-auto inline-flex justify-center items-center dark:hover:bg-gray-600 dark:hover:text-white" data-modal-hide="default-modal">
                                        <svg class="w-3 h-3" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 14 14">
                                            <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 1 6 6m0 0 6 6M7 7l6-6M7 7l-6 6" />
                                        </svg>
                                        <span class="sr-only">Close modal</span>
                                    </button>
                                </div>
                            </div>
                            <!-- Modal body -->
                            <div class="p-4 md:p-5 space-y-4">
                                <div class="flex flex-col bg-white mb-4 border-2 border-solid border-gray-100 shadow rounded-lg p-4">
                                    <div class="flex flex-col mr-2" style="width: 100%">
                                        <div id="questionReport" class="mb-2">
                                            Dau la thu do cua Viet Nam ?
                                        </div>
                                        <div id="answerReport" class="flex flex-col">
                                            <div>
                                                <strong>A.&nbsp;</strong>
                                                <span>Ho Chi Minh</span>
                                            </div>
                                            <div>
                                                <strong>B.&nbsp;</strong>
                                                <span>Ha Noi</span>
                                            </div>
                                            <div>
                                                <strong>C.&nbsp;</strong>
                                                <span>Da Nang</span>
                                            </div>
                                            <div>
                                                <strong>D.&nbsp;</strong>
                                                <span>Nha Trang</span>
                                            </div>
                                        </div>
                                    </div>

                                </div>
                                <div class="mt-2 flex flex-col shadow p-4">
                                    <div class="flex justify-between">
                                        <div>
                                            Correct Answers
                                        </div>
                                        <div class="flex items-center">
                                            <div class="mr-2">
                                                <img class="h-4 w-4 filter-green" src="~/images/correct.png" />
                                            </div>
                                            <div id="correctPercentReport">
                                                35%
                                            </div>
                                        </div>
                                    </div>
                                    <div class="mt-4 flex justify-between">
                                        <div>
                                            Average Time
                                        </div>
                                        <div class="flex items-center">
                                            <div class="mr-2">
                                                <img class="h-4 w-4" src="~/images/hourglass.png" />
                                            </div>
                                            <div id="avgTimeReport">
                                                3.6s
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div>
                                    <table class="w-full text-sm text-left rtl:text-right text-gray-500 dark:text-gray-400 shadow">
                                        <thead class="text-xs text-gray-700 uppercase dark:text-gray-400">
                                            <tr>
                                                <th scope="col" width="300px" class="px-6 py-3 bg-gray-50 dark:bg-gray-800">
                                                    Player
                                                </th>
                                                <th scope="col" class="px-6 py-3">
                                                    Answered
                                                </th>
                                                <th scope="col" class="px-6 py-3 bg-gray-50 dark:bg-gray-800">
                                                    Correct
                                                </th>
                                                <th scope="col" class="px-6 py-3">
                                                    Duration
                                                </th>
                                                <th scope="col" class="px-6 py-3">
                                                    Points
                                                </th>
                                            </tr>
                                        </thead>
                                        <tbody id="detailReport">
                                            <tr class="cursor-pointer border-b border-gray-200 text-lg dark:border-gray-700">
                                                <th scope="row" width="300px" class="px-6 py-4 text-black whitespace-nowrap bg-gray-50 dark:text-white dark:bg-gray-800">
                                                    <div class="flex items-center flex-row text-center">
                                                        <div class="relative mr-2 w-10 h-10 overflow-hidden bg-gray-100 rounded-full dark:bg-gray-600">
                                                            <img class="h-12 w-12 rounded-full" src="/images/avatar1.jpg" />

                                                        </div>
                                                        <div class="text-lg text-left text-black mr-4">
                                                            Bang
                                                        </div>
                                                    </div>
                                                </th>
                                                <td class="px-6 py-4 text-black">
                                                    A
                                                </td>
                                                <td style="color: #66BE39" class="px-6 py-4 bg-gray-50 text-black dark:bg-gray-800">
                                                    Yes
                                                </td>
                                                <td class="px-6 py-4 text-black">
                                                    2.2s
                                                </td>
                                                <td class="px-6 py-4 text-black">
                                                    <div class="flex items-center justify-start rounded-full">
                                                        <div class="h-6 w-6 mr-2">
                                                            <img src="/images/coin.png" />
                                                        </div>
                                                        <div class="font-bold text-yellow-300">
                                                            2000
                                                        </div>
                                                    </div>
                                                </td>
                                            </tr>
                                            <tr class="cursor-pointer border-b border-gray-200 text-lg dark:border-gray-700">
                                                <th scope="row" width="300px" class="px-6 py-4 text-black whitespace-nowrap bg-gray-50 dark:text-white dark:bg-gray-800">
                                                    <div class="flex items-center flex-row text-center">
                                                        <div class="relative mr-2 w-10 h-10 overflow-hidden bg-gray-100 rounded-full dark:bg-gray-600">
                                                            <img class="h-12 w-12 rounded-full" src="/images/avatar1.jpg" />

                                                        </div>
                                                        <div class="text-lg text-left text-black mr-4">
                                                            Bang
                                                        </div>
                                                    </div>
                                                </th>
                                                <td class="px-6 py-4 text-black">
                                                    A
                                                </td>
                                                <td style="color: #66BE39" class="px-6 py-4 bg-gray-50 text-black dark:bg-gray-800">
                                                    Yes
                                                </td>
                                                <td class="px-6 py-4 text-black">
                                                    2.2s
                                                </td>
                                                <td class="px-6 py-4 text-black">
                                                    <div class="flex items-center justify-start rounded-full">
                                                        <div class="h-6 w-6 mr-2">
                                                            <img src="/images/coin.png" />
                                                        </div>
                                                        <div class="font-bold text-yellow-300">
                                                            2000
                                                        </div>
                                                    </div>
                                                </td>
                                            </tr>

                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <table class="w-full text-sm text-left rtl:text-right text-gray-500 dark:text-gray-400 shadow">
                    <thead class="text-xs text-gray-700 uppercase dark:text-gray-400">
                        <tr>
                            <th scope="col" width="100px" class="px-6 py-3 bg-gray-50 dark:bg-gray-800">
                                No
                            </th>
                            <th scope="col" class="px-6 py-3">
                                Content
                            </th>
                            <th scope="col" class="px-6 py-3 bg-gray-50 dark:bg-gray-800">
                                Correct
                            </th>
                        </tr>
                    </thead>
                    <tbody id="questionTbody">
                        <tr data-modal-target="default-modal" data-modal-toggle="default-modal" class="cursor-pointer border-b border-gray-200 text-lg dark:border-gray-700">
                            <th scope="row" width="100px" class="px-6 py-4 text-black whitespace-nowrap bg-gray-50 dark:text-white dark:bg-gray-800">
                                1
                            </th>
                            <td class="px-6 py-4 text-black">
                                Dau la thu do cua Viet Nam?
                            </td>
                            <td style="color: #66BE39" class="px-6 py-4 bg-gray-50 text-black dark:bg-gray-800">
                                35%
                            </td>

                        </tr>
                        <tr data-modal-target="default-modal" data-modal-toggle="default-modal" class="cursor-pointer border-b border-gray-200 text-lg dark:border-gray-700">
                            <th scope="row" width="100px" class="px-6 py-4 text-black whitespace-nowrap bg-gray-50 dark:text-white dark:bg-gray-800">
                                2
                            </th>
                            <td class="px-6 py-4 text-black">
                                Dau la thu do cua Viet Nam?
                            </td>
                            <td style="color: #66BE39" class="px-6 py-4 bg-gray-50 text-black dark:bg-gray-800">
                                35%
                            </td>
                        </tr>

                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<script>
    // Function to check if the access token is valid
    async function isAccessTokenValid() {
        const token = getCookie('accessToken');
        if (!token) return false;

        try {
            const response = await fetch('https://localhost:7024/api/Authentication/check', {
                method: 'GET',
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json',
                }
            });

            if (!response.ok) throw new Error('Error validating token');

            const data = await response.json();

            const usernameDisplay = document.getElementById('usernameShow');
            const username = data.username;
            usernameDisplay.innerHTML = 'Hello, ' + username;
            return true;
        } catch (error) {
            console.error('Error making request:', error);
            return false;
        }
    }

    // Function to handle the authentication UI
    async function handleAuthUI() {
        const loginButton = document.querySelector('.login-btn');
        const registerButton = document.querySelector('.register-btn');
        const usernameDisplay = document.querySelector('.username');

        const isValid = await isAccessTokenValid();

        if (isValid) {
            loginButton.style.display = 'none';
            registerButton.style.display = 'none';
            usernameDisplay.style.display = 'inline-block';
        } else {
            deleteCookie("accessToken");
            loginButton.style.display = 'inline-block';
            registerButton.style.display = 'inline-block';
            usernameDisplay.style.display = 'none';
        }
    }

    // Event listener for DOMContentLoaded to initialize UI
    document.addEventListener('DOMContentLoaded', () => {
        handleAuthUI();

        const userMenu = document.getElementById('username');
        const userMenuButton = document.getElementById('usernameShow');
        const userDropdown = document.getElementById('userDropdown');
        const changePasswordDialog = document.getElementById('changePasswordDialog');
        const changePasswordBtn = document.getElementById('changePasswordBtn');
        const changeErrorMessage = document.getElementById('changeErrorMessage');

        const oldPwd = document.getElementById('oldPwd');
        const newPwd = document.getElementById('newPwd');
        const cfPwd = document.getElementById('cfPwd');

        //User dropdown
        userMenuButton.addEventListener('click', function () {
            userDropdown.classList.toggle('hidden');
        });

        document.addEventListener('click', function (event) {
            if (!userMenu.contains(event.target)) {
                userDropdown.classList.add('hidden');
            }
        });

        //Change password handle
        oldPwd.addEventListener('input', () => {
            changePasswordBtn.disabled = (!oldPwd.value || !newPwd.value || !cfPwd.value);
        });

        newPwd.addEventListener('input', () => {
            changePasswordBtn.disabled = (!oldPwd.value || !newPwd.value || !cfPwd.value);
        });

        cfPwd.addEventListener('input', () => {
            changePasswordBtn.disabled = (!oldPwd.value || !newPwd.value || !cfPwd.value);
        });

        window.showChangePasswordDialog = function () {
            changePasswordDialog.classList.remove('hidden');
        };

        changePasswordBtn.addEventListener('click', async function () {
            const oldPassword = oldPwd.value;
            const newPassword = newPwd.value;
            const confirmPassword = cfPwd.value;

            if (newPassword !== confirmPassword) {
                changeErrorMessage.textContent = 'New password and confirm password do not match.';
                changeErrorMessage.classList.remove('hidden');
                return;
            }

            const apiUrl = 'https://localhost:7024/api/Authentication/change';

            try {
                const token = getCookie('accessToken');
                if (!token) {
                    deleteCookie("accessToken");
                    handleAuthUI();
                }
                const response = await fetch(apiUrl, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${token}`
                    },
                    body: JSON.stringify(newPassword)
                });

                if (!response.ok) {
                    changeErrorMessage.textContent = response.text;
                    changeErrorMessage.classList.remove('hidden');
                } else {
                    changeErrorMessage.textContent = '';
                    changeErrorMessage.classList.add('hidden');
                    changePasswordDialog.classList.add('hidden');
                    alert("Change password successfully");
                    deleteCookie("accessToken");
                    window.location.href = '/authen/login';
                }
            } catch (error) {
                changeErrorMessage.textContent = error;
                changeErrorMessage.classList.remove('hidden');
            }
        });

        changePasswordDialog.addEventListener('click', function (event) {
            if (event.target === changePasswordDialog) {
                changePasswordDialog.classList.add('hidden');
            }
        });

        //Search input handle
        const input = document.getElementById("searchInput");
        input.addEventListener("keydown", function (event) {
            if (event.key === "Enter") {
                event.preventDefault();
                if (input.value != '') {
                    window.location.href = '/courses?search=' + input.value;
                }
            }
        });
    });
</script>

<script>
    const urlParams = new URLSearchParams(window.location.search);

    // Lấy giá trị của một tham số cụ thể, ví dụ: 'id'
    const id = urlParams.get('id');
    console.log("Id: " + id);
    getReport();
    var code = "";
    async function getReport() {
        const apiUrl = "https://localhost:7024/api/Gameplay/report/" + id;
        try {
            const response = await fetch(apiUrl, {
                method: 'GET'
            })

            if (response.ok) {
                const data = await response.json();
                console.log(data);
                code = data.code;
                correctPercent = data.correctPercent;
                incorrectPercent = data.incorrectPercent;
                document.getElementById("noPlayers").innerHTML = data.noPlayers;
                document.getElementById("noQuestions").innerHTML = data.noQuestions;
                initializeChart();
                document.getElementById("overviewTbody").innerHTML = "";
                for (var i = 0; i < data.overview.length; i++) {
                    var html = `<tr class="border-b border-gray-200 text-lg dark:border-gray-700">
                                                                <th scope="row" width="100px" class="px-6 py-4 text-black whitespace-nowrap bg-gray-50 dark:text-white dark:bg-gray-800">
                                                                    ${data.overview[i].rank}
                                                                </th>
                                                                <td class="px-6 py-4">
                                                                    <div class="flex items-center flex-row text-center">
                                                                        <div class="relative mr-2 w-10 h-10 overflow-hidden bg-gray-100 rounded-full dark:bg-gray-600">
                                                                            <img class="h-12 w-12 rounded-full" src=${data.overview[i].avatar} />

                                                                        </div>
                                                                        <div class="text-lg text-left text-black mr-4">
                                                                            ${data.overview[i].username}
                                                                        </div>
                                                                    </div>
                                                                </td>
                                                                <td class="px-6 py-4 bg-gray-50 text-black dark:bg-gray-800">
                                                                    ${data.overview[i].duration}s
                                                                </td>
                                                                <td class="px-6 py-4">
                                                                    <div class="flex items-center justify-start rounded-full">
                                                                        <div class="h-6 w-6 mr-2">
                                                                            <img src="/images/coin.png" />
                                                                        </div>
                                                                        <div class="font-bold text-yellow-300">
                                                                            ${data.overview[i].score} points
                                                                        </div>
                                                                    </div>
                                                                </td>
                                                            </tr>`;
                    document.getElementById("overviewTbody").innerHTML += html;
                }
                document.getElementById("questionTbody").innerHTML = "";
                total = data.question.length;
                for (var i = 0; i < data.question.length; i++) {

                    var html = `<tr id="${"questionR" + i}" onclick="openModal(${data.question[i].no})" data-modal-target="default-modal" data-modal-toggle="default-modal" class="cursor-pointer border-b border-gray-200 text-lg dark:border-gray-700">
                                                    <th scope="row" width="100px" class="px-6 py-4 text-black whitespace-nowrap bg-gray-50 dark:text-white dark:bg-gray-800">
                                                        ${data.question[i].no}
                                                    </th>
                                                    <td class="px-6 py-4 text-black">
                                                        ${data.question[i].content}
                                                    </td>
                                                    <td style="color: #66BE39" class="px-6 py-4 bg-gray-50 text-black dark:bg-gray-800">
                                                        ${data.question[i].correctPercent}%
                                                    </td>
                                                </tr>`;
                    document.getElementById("questionTbody").innerHTML += html;
                }


            }
        } catch (error) {
            console.log(error);
        }
    }
    var no = 1;
    var total = 0;
    function newQuestion(status) {
        console.log(status);
        if (status == "plus") {
            no++;
        }
        else {

            no--;
        }
        console.log(no);
        getQuestionDetail(no);
    }

    async function openModal(id) {
        no = id;

        document.getElementById("openModal").click();

        getQuestionDetail(id);
    }

    async function getQuestionDetail(no1) {
        if (no == 1) {
            document.getElementById("prev").style.display = "none";
        }
        else {
            document.getElementById("prev").style.display = "block";

        }
        if (no == total) {
            document.getElementById("next").style.display = "none";
        }
        else {
            document.getElementById("next").style.display = "block";

        }
        document.getElementById("modalHeader").innerHTML = "Question " + no1;
        const apiUrl = "https://localhost:7024/api/Gameplay/get-detail-question?id=" + id + "&turn=" + no1;
        try {
            const response = await fetch(apiUrl, {
                method: 'GET'
            })

            if (response.ok) {
                var str = "ABCDEFGHIJKLMNOP";
                const data = await response.json();
                console.log(data);
                document.getElementById("answerReport").innerHTML = "";
                document.getElementById("questionReport").innerHTML = data.questionDto.content;
                for (var i = 0; i < data.questionDto.answers.length; i++) {
                    var html = ``;
                    if (data.questionDto.answers[i].isCorrect) {
                        html = `
                                                                <div style="color: #66BE39"><strong>${str[i]}.&nbsp;</strong>
                                                                                        <span>${data.questionDto.answers[i].content}</span>
                                                                                    </div>`;
                    }
                    else {
                        html = `
                                                        <div><strong>${str[i]}.&nbsp;</strong>
                                                                                    <span>${data.questionDto.answers[i].content}</span>
                                                                                </div>`;
                    }

                    document.getElementById("answerReport").innerHTML += html;
                }
                document.getElementById("correctPercentReport").innerHTML = data.correctPercent + "%";
                document.getElementById("avgTimeReport").innerHTML = data.duration + "s";
                document.getElementById("detailReport").innerHTML = "";
                for (var i = 0; i < data.details.length; i++) {
                    var html = `
                                                <tr class="cursor-pointer border-b border-gray-200 text-lg dark:border-gray-700">
                                                                            <th scope="row" width="300px" class="px-6 py-4 text-black whitespace-nowrap bg-gray-50 dark:text-white dark:bg-gray-800">
                                                                                <div class="flex items-center flex-row text-center">
                                                                                    <div class="relative mr-2 w-10 h-10 overflow-hidden bg-gray-100 rounded-full dark:bg-gray-600">
                                                                                        <img class="h-12 w-12 rounded-full" src=${data.details[i].avatar} />

                                                                                    </div>
                                                                                    <div class="text-lg text-left text-black mr-4">
                                                                                            ${data.details[i].username}
                                                                                    </div>
                                                                                </div>
                                                                            </th>
                                                                            <td class="px-6 py-4 text-black">
                                                                                ${data.details[i].playerAnswer}
                                                                            </td>
                                                                            <td style="color: #66BE39" class="px-6 py-4 bg-gray-50 text-black dark:bg-gray-800">
            ${data.details[i].isCorrect
                            ? `<img class="h-8 w-8 filter-green" src="/images/correct.png" />`
                            : `<img class="h-8 w-8 filter-red" src="/images/incorrect.png" />`
                        }
                                                                            </td>
                                                                            <td class="px-6 py-4 text-black">
                                                                                ${data.details[i].duration + "s"}
                                                                            </td>
                                                                            <td class="px-6 py-4 text-black">
                                                                                <div class="flex items-center justify-start rounded-full">
                                                                                    <div class="h-6 w-6 mr-2">
                                                                                        <img src="/images/coin.png" />
                                                                                    </div>
                                                                                    <div class="font-bold text-yellow-300">
                                                                                            ${data.details[i].score}
                                                                                    </div>
                                                                                </div>
                                                                            </td>
                                                                        </tr>`;
                    document.getElementById("detailReport").innerHTML += html;
                }
            }
        } catch (error) {
            console.log(error);
        }
    }

    var correctPercent;
    var incorrectPercent;

    function initializeChart() {
        const getChartOptions = () => {
            return {
                series: [correctPercent, incorrectPercent],
                colors: ["#66BE39", "#FD3355"],
                chart: {
                    height: 420,
                    width: "100%",
                    type: "pie",
                },
                stroke: {
                    colors: ["white"],
                    lineCap: "",
                },
                plotOptions: {
                    pie: {
                        labels: {
                            show: true,
                        },
                        size: "100%",
                        dataLabels: {
                            offset: -25
                        }
                    },
                },
                labels: ["Correct", "Incorrect"],
                dataLabels: {
                    enabled: true,
                    style: {
                        fontFamily: "Inter, sans-serif",
                    },
                },
                legend: {
                    position: "bottom",
                    fontFamily: "Inter, sans-serif",
                },
                yaxis: {
                    labels: {
                        formatter: function (value) {
                            return value + "%"
                        },
                    },
                },
                xaxis: {
                    labels: {
                        formatter: function (value) {
                            return value + "%"
                        },
                    },
                    axisTicks: {
                        show: false,
                    },
                    axisBorder: {
                        show: false,
                    },
                },
            }
        }
        console.log(document.getElementById("pie-chart"));
        if (document.getElementById("pie-chart") && typeof ApexCharts !== 'undefined') {
            const chart = new ApexCharts(document.getElementById("pie-chart"), getChartOptions());
            chart.render();
            console.log(chart);
        }
    }

    function switchTab(tab) {
        switch (tab) {
            case "overview": {
                document.getElementById("overviewpart").style.display = "flex";
                document.getElementById("questionpart").style.display = "none";
                document.getElementById("overview").style.borderColor = "#8854c0";
                document.getElementById("overview").style.color = "#8854c0"
                document.getElementById("questions").style.borderColor = "";
                document.getElementById("questions").style.color = ""
                break;
            }
            case "questions": {
                document.getElementById("questionpart").style.display = "flex";
                document.getElementById("overviewpart").style.display = "none";
                document.getElementById("questions").style.borderColor = "#8854c0";
                document.getElementById("questions").style.color = "#8854c0"
                document.getElementById("overview").style.borderColor = "";
                document.getElementById("overview").style.color = ""
                break;
            }
        }
    }




</script>
<script>
    function setCookie(name, value, seconds) {
        const date = new Date();
        date.setTime(date.getTime() + (seconds * 1000));
        const expires = `expires=${date.toUTCString()}`;
        document.cookie = `${name}=${value}; ${expires}; path=/`;
    }

    function getCookieV2(key) {
        const value = document.cookie;

        const cookies = value.split('; ').reduce((acc, cookie) => {
            const [k, v] = cookie.split('=');
            acc[k] = decodeURIComponent(v);
            return acc;
        }, {});

        return cookies[key];
    }

    function deleteCookie(name) {
        document.cookie = `${name}=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;`;
    }
    function logout() {
        deleteCookie("accessToken");
        handleAuthUI();
    }

    // Function to check if the access token is valid
    async function isAccessTokenValid() {
        const token = getCookieV2('accessToken');
        if (!token) return false;

        try {
            const response = await fetch('https://localhost:7024/api/Authentication/check', {
                method: 'GET',
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json',
                }
            });

            if (!response.ok) throw new Error('Error validating token');

            const data = await response.json();

            const usernameDisplay = document.getElementById('usernameShow');
            const username = data.username;
            usernameDisplay.innerHTML = 'Hello, ' + username;
            return true;
        } catch (error) {
            console.error('Error making request:', error);
            return false;
        }
    }

    // Function to handle the authentication UI
    async function handleAuthUI() {
        const loginButton = document.querySelector('.login-btn');
        const registerButton = document.querySelector('.register-btn');
        const usernameDisplay = document.querySelector('.username');

        const isValid = await isAccessTokenValid();

        if (isValid) {
            loginButton.style.display = 'none';
            registerButton.style.display = 'none';
            usernameDisplay.style.display = 'inline-block';
        } else {
            deleteCookie("accessToken");
            loginButton.style.display = 'inline-block';
            registerButton.style.display = 'inline-block';
            usernameDisplay.style.display = 'none';
        }
    }

    // Function to handle sidebar toggling
    function updateSidebar() {
        const sidebar = document.getElementById('sidebar');
        const mainContent = document.querySelector('.ml-0.md\\:ml-64');
        const mobileMenuToggle = document.getElementById('mobileMenuToggle');
        const collapseSidebar = document.getElementById('collapseSidebar');
        const menuText = document.getElementById('menuText');
        const menuItemTexts = document.querySelectorAll('.menuItemText');

        let isSidebarCollapsed = false;
        let isSidebarOpen = window.innerWidth > 768;

        if (window.innerWidth <= 768) {
            sidebar.classList.toggle('-translate-x-full', !isSidebarOpen);
            sidebar.classList.toggle('translate-x-0', isSidebarOpen);
            mainContent.classList.remove('md:ml-64', 'md:ml-16');
            mobileMenuToggle.classList.remove('hidden');
            collapseSidebar.classList.add('hidden');
        } else {
            sidebar.classList.remove('-translate-x-full');
            sidebar.classList.add('translate-x-0');
            sidebar.classList.toggle('w-64', !isSidebarCollapsed);
            sidebar.classList.toggle('w-16', isSidebarCollapsed);
            mainContent.classList.toggle('md:ml-64', !isSidebarCollapsed);
            mainContent.classList.toggle('md:ml-16', isSidebarCollapsed);
            mobileMenuToggle.classList.add('hidden');
            collapseSidebar.classList.toggle('hidden', isSidebarCollapsed);
        }

        menuText.classList.toggle('hidden', isSidebarCollapsed);
        menuItemTexts.forEach(text => text.classList.toggle('hidden', isSidebarCollapsed));
    }

    // Debounced resize event listener to optimize performance
    let resizeTimeout;
    window.addEventListener('resize', () => {
        clearTimeout(resizeTimeout);
        resizeTimeout = setTimeout(updateSidebar, 200);
    });

    // Function to toggle sidebar state
    function toggleSidebarState() {
        isSidebarOpen = !isSidebarOpen;
        updateSidebar();
    }

    // Event listener for DOMContentLoaded to initialize UI
    document.addEventListener('DOMContentLoaded', () => {
        handleAuthUI();

        const userMenu = document.getElementById('username');
        const userMenuButton = document.getElementById('usernameShow');
        const userDropdown = document.getElementById('userDropdown');
        const changePasswordDialog = document.getElementById('changePasswordDialog');
        const changePasswordBtn = document.getElementById('changePasswordBtn');
        const changeErrorMessage = document.getElementById('changeErrorMessage');

        const oldPwd = document.getElementById('oldPwd');
        const newPwd = document.getElementById('newPwd');
        const cfPwd = document.getElementById('cfPwd');

        //User dropdown
        userMenuButton.addEventListener('click', function () {
            userDropdown.classList.toggle('hidden');
        });

        document.addEventListener('click', function (event) {
            if (!userMenu.contains(event.target)) {
                userDropdown.classList.add('hidden');
            }
        });

        //Change password handle
        oldPwd.addEventListener('input', () => {
            changePasswordBtn.disabled = (!oldPwd.value || !newPwd.value || !cfPwd.value);
        });

        newPwd.addEventListener('input', () => {
            changePasswordBtn.disabled = (!oldPwd.value || !newPwd.value || !cfPwd.value);
        });

        cfPwd.addEventListener('input', () => {
            changePasswordBtn.disabled = (!oldPwd.value || !newPwd.value || !cfPwd.value);
        });

        window.showChangePasswordDialog = function () {
            changePasswordDialog.classList.remove('hidden');
        };

        changePasswordBtn.addEventListener('click', async function () {
            const oldPassword = oldPwd.value;
            const newPassword = newPwd.value;
            const confirmPassword = cfPwd.value;

            if (newPassword !== confirmPassword) {
                changeErrorMessage.textContent = 'New password and confirm password do not match.';
                changeErrorMessage.classList.remove('hidden');
                return;
            }

            const apiUrl = 'https://localhost:7024/api/Authentication/change';

            try {
                const token = getCookieV2('accessToken');
                if (!token) {
                    deleteCookie("accessToken");
                    handleAuthUI();
                }
                const response = await fetch(apiUrl, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${token}`
                    },
                    body: JSON.stringify(newPassword)
                });

                if (!response.ok) {
                    changeErrorMessage.textContent = response.text;
                    changeErrorMessage.classList.remove('hidden');
                } else {
                    changeErrorMessage.textContent = '';
                    changeErrorMessage.classList.add('hidden');
                    changePasswordDialog.classList.add('hidden');
                    alert("Change password successfully");
                    deleteCookie("accessToken");
                    window.location.href = '/authen/login';
                }
            } catch (error) {
                changeErrorMessage.textContent = error;
                changeErrorMessage.classList.remove('hidden');
            }
        });

        changePasswordDialog.addEventListener('click', function (event) {
            if (event.target === changePasswordDialog) {
                changePasswordDialog.classList.add('hidden');
            }
        });

        //Search input handle
        const input = document.getElementById("searchInput");
        input.addEventListener("keydown", function (event) {
            if (event.key === "Enter") {
                event.preventDefault();
                if (input.value != '') {
                    window.location.href = '/courses?search=' + input.value;
                }
            }
        });

        // Sidebar toggle event listeners
        const sidebar = document.getElementById('sidebar');
        const toggleSidebar = document.getElementById('toggleSidebar');
        const collapseSidebar = document.getElementById('collapseSidebar');
        const mobileMenuToggle = document.getElementById('mobileMenuToggle');
        const menuText = document.getElementById('menuText');
        const menuItemTexts = document.querySelectorAll('.menuItemText');
        const mainContent = document.querySelector('.ml-0.md\\:ml-64');

        let isSidebarCollapsed = false;
        let isSidebarOpen = window.innerWidth > 768;

        function updateSidebar() {
            if (window.innerWidth <= 768) {
                sidebar.classList.toggle('-translate-x-full', !isSidebarOpen);
                sidebar.classList.toggle('translate-x-0', isSidebarOpen);
                mainContent.classList.remove('md:ml-64', 'md:ml-16');
                mobileMenuToggle.classList.remove('hidden');
                collapseSidebar.classList.add('hidden');
            } else {
                sidebar.classList.remove('-translate-x-full');
                sidebar.classList.add('translate-x-0');
                sidebar.classList.toggle('w-64', !isSidebarCollapsed);
                sidebar.classList.toggle('w-16', isSidebarCollapsed);
                mainContent.classList.toggle('md:ml-64', !isSidebarCollapsed);
                mainContent.classList.toggle('md:ml-16', isSidebarCollapsed);
                mobileMenuToggle.classList.add('hidden');
                collapseSidebar.classList.toggle('hidden', isSidebarCollapsed);
            }

            menuText.classList.toggle('hidden', isSidebarCollapsed);
            menuItemTexts.forEach(text => {
                text.classList.toggle('hidden', isSidebarCollapsed);
            });
        }

        function toggleSidebarState() {
            if (window.innerWidth <= 768) {
                isSidebarOpen = !isSidebarOpen;
            } else {
                isSidebarCollapsed = !isSidebarCollapsed;
            }
            updateSidebar();
        }

        window.addEventListener('resize', updateSidebar);
        updateSidebar();
    });

</script>